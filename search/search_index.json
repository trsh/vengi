{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to vengi This is a C++ voxel game engine and its tools. It includes a voxel editor with character animation support and loading/saving into a lot of voxel volume formats . There are other tools like e.g. a thumbnailer for your filemanager and a command line tool to convert or modify between several voxel formats. Find out more about features and status updates on my twitter profile . The project source code is located at github/mgerhardy/vengi . We also provide debian and windows binaries here. Join our discord Server . If you just came here to use a voxel editor or to convert your voxel models into an obj or ply file, you should just go to the download page and check out the documentation of the tool as given in the navigation bar. If you came here as a developer, make sure to check out the dependencies and set up your development environment. The build scripts are cmake based, so make sure to have it installed and generate the project files for your desired ide. After setting up everything, make sure to check out the compilation guide. Images","title":"Welcome to vengi"},{"location":"#welcome-to-vengi","text":"This is a C++ voxel game engine and its tools. It includes a voxel editor with character animation support and loading/saving into a lot of voxel volume formats . There are other tools like e.g. a thumbnailer for your filemanager and a command line tool to convert or modify between several voxel formats. Find out more about features and status updates on my twitter profile . The project source code is located at github/mgerhardy/vengi . We also provide debian and windows binaries here. Join our discord Server . If you just came here to use a voxel editor or to convert your voxel models into an obj or ply file, you should just go to the download page and check out the documentation of the tool as given in the navigation bar. If you came here as a developer, make sure to check out the dependencies and set up your development environment. The build scripts are cmake based, so make sure to have it installed and generate the project files for your desired ide. After setting up everything, make sure to check out the compilation guide.","title":"Welcome to vengi"},{"location":"#images","text":"","title":"Images"},{"location":"AIRemoteDebugger/","text":"Remote AI Debugger This application allows you to connect to a running gameserver and inspect and change the state of every single ai controlled entity.","title":"AI development"},{"location":"AIRemoteDebugger/#remote-ai-debugger","text":"This application allows you to connect to a running gameserver and inspect and change the state of every single ai controlled entity.","title":"Remote AI Debugger"},{"location":"Animations/","text":"Animations There is a test application that is able to play all of the supported animations and to test them during development.. LUA You can write your animations in lua scripts - but keep in mind that this is of course not as fast as writing them in C++ - you should only use this during development for faster round trip times. Besides writing the animations in lua, the skeleton properties are stored in lua. Hot reloading (This is for the C++ code) You can link the animations into a shared object that is loaded into the AnimationSystem class. This feature is not active by default. If you would like to enable the hot reload support - call cmake with -DHOT_RELOAD_ANIM=1 . Besides the dynamic loading of the animation functions, we also install a watch on the dynamic library. Whenever the library is recompiled and relinked, the applications will automatically reload them and present you the latest code changes. The cvar that stores the value of the path to the library is called anim_lib . It should get filled automatically. But if not, either export the environment variable ANIM_LIB to the full path of that lib, or set the cvar anim_lib to the full path to the lib.","title":"Animations"},{"location":"Animations/#animations","text":"There is a test application that is able to play all of the supported animations and to test them during development..","title":"Animations"},{"location":"Animations/#lua","text":"You can write your animations in lua scripts - but keep in mind that this is of course not as fast as writing them in C++ - you should only use this during development for faster round trip times. Besides writing the animations in lua, the skeleton properties are stored in lua.","title":"LUA"},{"location":"Animations/#hot-reloading","text":"(This is for the C++ code) You can link the animations into a shared object that is loaded into the AnimationSystem class. This feature is not active by default. If you would like to enable the hot reload support - call cmake with -DHOT_RELOAD_ANIM=1 . Besides the dynamic loading of the animation functions, we also install a watch on the dynamic library. Whenever the library is recompiled and relinked, the applications will automatically reload them and present you the latest code changes. The cvar that stores the value of the path to the library is called anim_lib . It should get filled automatically. But if not, either export the environment variable ANIM_LIB to the full path of that lib, or set the cvar anim_lib to the full path to the lib.","title":"Hot reloading"},{"location":"Attributes/","text":"Attributes The attrib module manages containers with attributes that can be attached to any item or entity in the world. Attributes are things like speed, strength, intelligence (see the network definition for a full list). The attributes are then calculated by the different containers an entity has assigned (via equipment, or directly to the character). The absolute values are summed up, and then the percentage modifiers are added on top. If you e.g. get a buff or debuff this is just applying a container to your entity. The values are communicated to the client and some are also broadcasted to other clients that are seeing you. LUA The containers are defined in lua scripts. See the attribute files that are coming with the tests, or with the server.","title":"Attributes"},{"location":"Attributes/#attributes","text":"The attrib module manages containers with attributes that can be attached to any item or entity in the world. Attributes are things like speed, strength, intelligence (see the network definition for a full list). The attributes are then calculated by the different containers an entity has assigned (via equipment, or directly to the character). The absolute values are summed up, and then the percentage modifiers are added on top. If you e.g. get a buff or debuff this is just applying a container to your entity. The values are communicated to the client and some are also broadcasted to other clients that are seeing you.","title":"Attributes"},{"location":"Attributes/#lua","text":"The containers are defined in lua scripts. See the attribute files that are coming with the tests, or with the server.","title":"LUA"},{"location":"Basics/","text":"Basics Coordinate system We are using the default opengl right handed coordinate system with x going right, y going upwards and z point towards you.","title":"Basic"},{"location":"Basics/#basics","text":"","title":"Basics"},{"location":"Basics/#coordinate-system","text":"We are using the default opengl right handed coordinate system with x going right, y going upwards and z point towards you.","title":"Coordinate system"},{"location":"CHANGELOG/","text":"Changelog A more detailed changelog can be found on github . Join our Discord server . See the documentation for further details. Known issues . 0.0.22 (2022-XX-XX) General: Improvements on GLTF format handling Fixed block id parsing for StarMade voxel models Major improvements in scene graph transform handling Packaging: There is a snap package available now ( io.github.mgerhardy.vengi.voxedit ) VoxEdit: Fixed layer color selection if you have multiple layers Fixed moving nodes in the scene graph panel Fixed transforms in scene graph mode (translation, rotation) 0.0.21 (2022-09-05) General: Added support for minecraft 1.13 region files Added support for loading minecraft level.dat (only with supported region files) Added support for WorldEdit schematics Added support for Minecraft nbt files Added support for StarMade voxel models Added support for Quake1 and UFO:Alien Invasion Reduced memory footprint for voxelizing huge meshes Support wrap mode texture settings for gltf voxelization Improved sanity check for Qubicle Binary format support Fixed texture lookup error in gltf voxelization Extended lua vector bindings and allow to import heightmaps Improved the file dialog filters Added new lua scripts and extended lua integration in voxconvert Added support for RGB ( pal ) and Gimp ( gpl ) palette loading Improved the Command & Conquer VXL format support VoxEdit: Fixed resetting the camera in eye mode New asset panel Place images, models and colors via drag and drop into the scene Extended scene mode modifiers to allow resizing the volumes (double click in scene mode) Fixed updating the locked axis plane on change Fixed scene graph node panel width Fixed mesh extraction on chunk boundaries Fixed new volume dialog input handling Fixed cursor being invisible with bloom disabled Fixed cursor face being on the wrong side of the voxel at the volume edges Fixed last opened files with spaces in their names Fixed loading files from command line again Allow to select scene graph node from the animation timeline Fixed deleting key frames Improved adding new key frames 0.0.20 (2022-06-14) General: Added support for minecraft schematic Refactored and extended the lua script integration Implemented applying depth/height map to a 2d plane Added support for new magicavoxel format (animations) Preserve node hierarchie when saving vxr GLTF voxelization Allow to enable certain renderer features Expose more noise functions to the lua scripts Expose more volume functions to the lua scripts Allow to delete voxels from within a lua script Improved splitting of volumes (target volume size) Expose more region functions to the lua scripts Added more lua example scripts Improved color sampling for voxelization Started to support different palettes in one scene Fixed vxc support Load the palette from the source file Fixed vxm file path when saving vxr Save vxmc (version 12) now Changed default ambient color and gamma values Improved osx dmg file and app bundles VoxEdit: Fixed start problems on some systems with multisampled framebuffers Allow to drag and drop colors from the palette Change between the edit and scene mode is now bound to tab Updated imguizmo to support clicking the view cube Cursor is no volume anymore but a plane Implemented plane filling Added extrude feature Allow to place a single voxel Fixed keyboard input errors that made the ui unusable Don't reload the last opened file with every start VoxConvert: Extended --dump to also show the key frames and the voxel count Removed --src-palette (src palette is always used) 0.0.19 (2022-03-27) General: Replaced minecraft support with own implementation Added support for Sandbox VXA format (via VXR) and improved VXR Allow to change the ui colors via cvar ( ui_style ) Added bloom render support for vox and vxm Added support for loading key frames if the format supports it Improved apple support in file dialog The palette handling was refactored Allow to save the MATL chunk in magicavoxel vox files Ability to scale exported mesh with different values for each axis Added stl voxelization support Allow to modify the camera zoom min/max values Allow to load different sizes for AoS VXL files Lerp the camera zooming Added support for GLTF export Added experimental export support for FBX ascii Increased the max scene graph model nodes from 256 to 1024 VoxEdit: Added new command to fill hollows in models Fixed escape key not closing the dialogs Added support for drag and drop the nodes of the scene graph Scene graph rendering improved Removed noise panel (use the lua scripts for noise support) Fixed a lot of undo/redo cases and improved the test cases a lot Fixed viewport screenshot creation (now also bound to F5) Added dialog to configure the mesh and voxel format settings for loading/saving Improved the palette panel Improved the guizmo for translation and rotation Open in scene mode as default VoxConvert: Added --image-as-plane and --image-as-heightmap parameters Allow to create a palette from input files 0.0.18 (2022-02-12) renamed the github project to vengi - the url changed to https://github.com/mgerhardy/vengi . Build: Removed own cmake unity-build implementation Fixed build when GAMES was set to OFF General: Extended qbcl format support Fixed color conversion issue when importing palettes from voxel models Voxelization of obj meshes now also fills the inner parts of the mesh with voxels Fixed magicavoxel pivot issue (sometimes wrong positions) Added support for sandbox vxc format Added support for sandbox vxt format Added new example lua scripts VoxConvert: --input can now also handle directories VoxEdit: Added context actions to scene graph panel Fixed mouse input issues in fullscreen mode Fixed script editor placement 0.0.17 (2022-01-23) General: Fixed relative path handling for registered paths Stop event loop if window is minimized (reduce cpu usage) Support scene graphs in the voxel formats Fixed a few issues with the magicavoxel vox format (switched to ogt_vox) Load properties from supported voxel formats (vxr, vox, gox) Added support for loading minecraft region files (used enkimi) Fixed vxm pivot and black color issue Added obj voxelization Improved obj export Improved file dialog VoxConvert: Added --crop parameter that reduces the volumes to their real voxel sizes Added --split option to cut volumes into smaller pieces Added --export-layers to export all the layers of a scene into single files Added --dump to dump the scene graph of the input file Added --resize to resize the volumes by the given x, y and z values VoxEdit: Fixed torus shape Added scene graph panel Fixed an issue that delayed the start by a few seconds 0.0.16 (2021-12-27) General: Fixed magicavoxel vox file saving Added support for old magicavoxel (pre RIFF) format Fixed bugs in binvox support Fixed save dir for vxm files when saving vxr Save vxm version 5 (with included pivot) Support bigger volumes for magicavoxel files VoxConvert: Fixed --force handling for target files Allow to operate on multiple input files Added --translate command line option Added --pivot command line option nippon palette is not loaded if --src-palette is used and it's no hard error anymore if this fails VoxEdit: Add recently used files to the ui 0.0.15 (2021-12-18) General: Fixed missing vxm (version 4) saving support Fixed missing palette value for vxm saving Added support for loading only the palettes Added support for goxel gox file format Added support for sproxel csv file format Added support for a lot more image formats Improved lod creation for thin surface voxels Fixed vxr9 load support Added support for writing vxr files VoxConvert: Added option to keep the input file palette and don't perform quantization Allow to export the palette to png Allow to generate models from heightmap images Allow to run lua scripts to modify volumes Allow to export or convert only single layers ( --filter ) Allow to mirror and rotate the volumes Thumbnailer: Try to use the built-in palette for models VoxEdit: Allow to import palettes from volume formats, too Implemented camera panning Added more layer merge functions 0.0.14 (2021-11-21) General: License for our own voxel models is now CC-BY-SA Support loading just the thumbnails from voxel formats Support bigger volume sizes for a few formats Don't polute the home directory with build dir settings Fixed gamma handling in shaders Added bookmark support to the ui dialog Thumbnailer: Added qbcl thumbnail support VoxEdit: Render the inactive layer in grayscale mode 0.0.13 (2021-10-29) General: Logfile support added Fixed windows DLL handling for animation hot reloading UI: Fixed log notifications taking away the focus from the current widget VoxEdit: Fixed windows OpenGL error while rendering the viewport 0.0.12 (2021-10-26) General: Fixed a few windows compilation issues Fixed issues in the automated build pipelines to produce windows binaries 0.0.11 (2021-10-25) General: Added url command Reduced memory allocations per frame Added key bindings dialog Added notifications for warnings and errors in the ui Fixed Sandbox Voxedit VXM v12 loading and added saving support Fixed MagicaVoxel vox file rotation handling VoxEdit: Removed old ui and switched to dearimgui Added lua script editor Added noise api support to the lua scripts 0.0.10 (2021-09-19) General: Added --version and -v commandline option to show the current version of each application Fixed texture coordinate indices for multi layer obj exports Improved magicavoxel transform support for some models Fixed magicavoxel x-axis handling Support newer versions of vxm and vxr Fixed bug in file dialog which prevents you to delete characters #77 VoxEdit: Improved scene edit mode Progress on the ui conversion to dearimgui Tools: Rewrote the ai debugger 0.0.9 (2020-10-03) General: Fixed obj texcoord export: Sampling the borders of the texel now Added multi object support to obj export 0.0.8 (2020-09-30) General: Added obj and ply export support Restructured the documentation Improved font support for imgui ui Backend: Reworked ai debugging network protocol Optimized behaviour tree filters 0.0.7 (2020-09-15) General: Fixed wrong-name-for-symlinks shown Added support for writing qef files Added lua script interface to generate voxels Added stacktrace support for windows Refactored module structure (split app and core) Optimized character animations Hot reload character animation C++ source changes in debug builds Added quaternion lua support Updated external dependencies Refactored lua bindings Support Chronovox-Studio files (csm) Support Nick's Voxel Model files (nvm) Support more versions of the vxm format VoxEdit: Converted some voxel generation functions to lua Implemented new voxel generator scripts 0.0.6 (2020-08-02) General: Fixed gamma cvar usage Enable vsync by default Updated external dependencies Activated OpenCL in a few tools Added symlink support to virtual filesystem VoxEdit: Fixed loading palette lua script with material definitions Fixed error in resetting mirror axis Fixed noise generation Reduced palette widget size Fixed palette widget being invisible on some dpi scales 0.0.5 (2020-07-26) Client: Fixed movement Server: Fixed visibility check Fixed segfault while removing npcs VoxEdit: Started to add scene mode edit support (move volumes) VoxConvert: Support different palette files (cvar palette ) Support writing outside the registered application paths Allow to overwrite existing files General: Switched to qb as default volume format Improved scene graph support for Magicavoxel vox files Fixed invisible voxels for qb and qbt (Qubicle) volume format Support automatic loading different volume formats for assets Support Command&Conquer vxl files Support Ace of Spades map files (vxl) Support Qubicle exchange format (qef) Perform mesh extraction in dedicated threads for simple volume rendering Improved gizmo rendering and translation support Fixed memory leaks on shutdown Improved profiling support via tracy 0.0.4 (2020-06-07) General: Added support for writing binvox files Added support for reading kvx (Build-Engine) and kv6 (SLAB6) voxel volumes Performed some AFL hardening on voxel format code Don't execute keybindings if the console is active Added basic shader storage buffer support Reduced voxel vertex size from 16 to 8 bytes Apply checkerboard pattern to water surface Improved tracy profiling support A few highdpi fixes Server: Allow to specify the database port Fixed loading database chunks VoxEdit: Added scale console command to produce LODs VoxConvert: Added ability to merge all layers into one 0.0.3 (2020-05-17) Assets: Added music tracks Updated and added some new voxel models VoxEdit: Made some commands available to the ui Tweak thicken command Updated default tree generation ui values Save layers to all supported formats Fixed tree generation issue for some tree types Changed default reference position to be at the center bottom Reduced max supported volume size General: Print stacktraces on asserts Improved tree generation (mainly used in voxedit) Fixed a few asserts in debug mode for the microsoft stl Added debian package support Fixed a few undefined behaviour issues and integer overflows that could lead to problems Reorganized some modules to speed up compilation and linking times Improved audio support Fixed timing issues Fixed invalid GL states after deleting objects VoxConvert: Added a new tool to convert different voxel volumes between supported formats Currently supported are cub (CubeWorld), vox (MagicaVoxel), vmx (VoxEdit Sandbox), binvox and qb/qbt (Qubicle) Client: Added footstep and ambience sounds 0.0.2 (2020-05-06) VoxEdit: Static linked VC++ Runtime Extract voxels by color into own layers Updated tree and noise windows Implemented thicken console command Escape abort modifier action Added L-System panel General: Fixed binvox header parsing Improved compilation speed Fixed compile errors with locally installed glm 0.9.9 Fixed setup-documentation errors Fixed shader pipeline rebuilds if included shader files were modified Improved palm tree generator Optimized mesh extraction for the world (streaming volumes) Added new voxel models (Re-)added Tracy profiler support and removed own imgui-based implementation Fixed writing of key bindings Improved compile speed and further removed the STL from a lot of places Updated all dependencies to their latest version Server/Client: Added DBChunkPersister Built-in HTTP server to download the chunks Replaced ui for the client Voxel rendering Implemented reflection for water surfaces Apply checkerboard pattern to voxel surfaces Up-scaling effect for new voxel chunks while they pop in Optimized rendering by not using one giant vbo 0.0.1 \"Initial Release\" (2020-02-08) VoxEdit: initial release","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"A more detailed changelog can be found on github . Join our Discord server . See the documentation for further details. Known issues .","title":"Changelog"},{"location":"CHANGELOG/#0022-2022-xx-xx","text":"General: Improvements on GLTF format handling Fixed block id parsing for StarMade voxel models Major improvements in scene graph transform handling Packaging: There is a snap package available now ( io.github.mgerhardy.vengi.voxedit ) VoxEdit: Fixed layer color selection if you have multiple layers Fixed moving nodes in the scene graph panel Fixed transforms in scene graph mode (translation, rotation)","title":"0.0.22 (2022-XX-XX)"},{"location":"CHANGELOG/#0021-2022-09-05","text":"General: Added support for minecraft 1.13 region files Added support for loading minecraft level.dat (only with supported region files) Added support for WorldEdit schematics Added support for Minecraft nbt files Added support for StarMade voxel models Added support for Quake1 and UFO:Alien Invasion Reduced memory footprint for voxelizing huge meshes Support wrap mode texture settings for gltf voxelization Improved sanity check for Qubicle Binary format support Fixed texture lookup error in gltf voxelization Extended lua vector bindings and allow to import heightmaps Improved the file dialog filters Added new lua scripts and extended lua integration in voxconvert Added support for RGB ( pal ) and Gimp ( gpl ) palette loading Improved the Command & Conquer VXL format support VoxEdit: Fixed resetting the camera in eye mode New asset panel Place images, models and colors via drag and drop into the scene Extended scene mode modifiers to allow resizing the volumes (double click in scene mode) Fixed updating the locked axis plane on change Fixed scene graph node panel width Fixed mesh extraction on chunk boundaries Fixed new volume dialog input handling Fixed cursor being invisible with bloom disabled Fixed cursor face being on the wrong side of the voxel at the volume edges Fixed last opened files with spaces in their names Fixed loading files from command line again Allow to select scene graph node from the animation timeline Fixed deleting key frames Improved adding new key frames","title":"0.0.21 (2022-09-05)"},{"location":"CHANGELOG/#0020-2022-06-14","text":"General: Added support for minecraft schematic Refactored and extended the lua script integration Implemented applying depth/height map to a 2d plane Added support for new magicavoxel format (animations) Preserve node hierarchie when saving vxr GLTF voxelization Allow to enable certain renderer features Expose more noise functions to the lua scripts Expose more volume functions to the lua scripts Allow to delete voxels from within a lua script Improved splitting of volumes (target volume size) Expose more region functions to the lua scripts Added more lua example scripts Improved color sampling for voxelization Started to support different palettes in one scene Fixed vxc support Load the palette from the source file Fixed vxm file path when saving vxr Save vxmc (version 12) now Changed default ambient color and gamma values Improved osx dmg file and app bundles VoxEdit: Fixed start problems on some systems with multisampled framebuffers Allow to drag and drop colors from the palette Change between the edit and scene mode is now bound to tab Updated imguizmo to support clicking the view cube Cursor is no volume anymore but a plane Implemented plane filling Added extrude feature Allow to place a single voxel Fixed keyboard input errors that made the ui unusable Don't reload the last opened file with every start VoxConvert: Extended --dump to also show the key frames and the voxel count Removed --src-palette (src palette is always used)","title":"0.0.20 (2022-06-14)"},{"location":"CHANGELOG/#0019-2022-03-27","text":"General: Replaced minecraft support with own implementation Added support for Sandbox VXA format (via VXR) and improved VXR Allow to change the ui colors via cvar ( ui_style ) Added bloom render support for vox and vxm Added support for loading key frames if the format supports it Improved apple support in file dialog The palette handling was refactored Allow to save the MATL chunk in magicavoxel vox files Ability to scale exported mesh with different values for each axis Added stl voxelization support Allow to modify the camera zoom min/max values Allow to load different sizes for AoS VXL files Lerp the camera zooming Added support for GLTF export Added experimental export support for FBX ascii Increased the max scene graph model nodes from 256 to 1024 VoxEdit: Added new command to fill hollows in models Fixed escape key not closing the dialogs Added support for drag and drop the nodes of the scene graph Scene graph rendering improved Removed noise panel (use the lua scripts for noise support) Fixed a lot of undo/redo cases and improved the test cases a lot Fixed viewport screenshot creation (now also bound to F5) Added dialog to configure the mesh and voxel format settings for loading/saving Improved the palette panel Improved the guizmo for translation and rotation Open in scene mode as default VoxConvert: Added --image-as-plane and --image-as-heightmap parameters Allow to create a palette from input files","title":"0.0.19 (2022-03-27)"},{"location":"CHANGELOG/#0018-2022-02-12","text":"renamed the github project to vengi - the url changed to https://github.com/mgerhardy/vengi . Build: Removed own cmake unity-build implementation Fixed build when GAMES was set to OFF General: Extended qbcl format support Fixed color conversion issue when importing palettes from voxel models Voxelization of obj meshes now also fills the inner parts of the mesh with voxels Fixed magicavoxel pivot issue (sometimes wrong positions) Added support for sandbox vxc format Added support for sandbox vxt format Added new example lua scripts VoxConvert: --input can now also handle directories VoxEdit: Added context actions to scene graph panel Fixed mouse input issues in fullscreen mode Fixed script editor placement","title":"0.0.18 (2022-02-12)"},{"location":"CHANGELOG/#0017-2022-01-23","text":"General: Fixed relative path handling for registered paths Stop event loop if window is minimized (reduce cpu usage) Support scene graphs in the voxel formats Fixed a few issues with the magicavoxel vox format (switched to ogt_vox) Load properties from supported voxel formats (vxr, vox, gox) Added support for loading minecraft region files (used enkimi) Fixed vxm pivot and black color issue Added obj voxelization Improved obj export Improved file dialog VoxConvert: Added --crop parameter that reduces the volumes to their real voxel sizes Added --split option to cut volumes into smaller pieces Added --export-layers to export all the layers of a scene into single files Added --dump to dump the scene graph of the input file Added --resize to resize the volumes by the given x, y and z values VoxEdit: Fixed torus shape Added scene graph panel Fixed an issue that delayed the start by a few seconds","title":"0.0.17 (2022-01-23)"},{"location":"CHANGELOG/#0016-2021-12-27","text":"General: Fixed magicavoxel vox file saving Added support for old magicavoxel (pre RIFF) format Fixed bugs in binvox support Fixed save dir for vxm files when saving vxr Save vxm version 5 (with included pivot) Support bigger volumes for magicavoxel files VoxConvert: Fixed --force handling for target files Allow to operate on multiple input files Added --translate command line option Added --pivot command line option nippon palette is not loaded if --src-palette is used and it's no hard error anymore if this fails VoxEdit: Add recently used files to the ui","title":"0.0.16 (2021-12-27)"},{"location":"CHANGELOG/#0015-2021-12-18","text":"General: Fixed missing vxm (version 4) saving support Fixed missing palette value for vxm saving Added support for loading only the palettes Added support for goxel gox file format Added support for sproxel csv file format Added support for a lot more image formats Improved lod creation for thin surface voxels Fixed vxr9 load support Added support for writing vxr files VoxConvert: Added option to keep the input file palette and don't perform quantization Allow to export the palette to png Allow to generate models from heightmap images Allow to run lua scripts to modify volumes Allow to export or convert only single layers ( --filter ) Allow to mirror and rotate the volumes Thumbnailer: Try to use the built-in palette for models VoxEdit: Allow to import palettes from volume formats, too Implemented camera panning Added more layer merge functions","title":"0.0.15 (2021-12-18)"},{"location":"CHANGELOG/#0014-2021-11-21","text":"General: License for our own voxel models is now CC-BY-SA Support loading just the thumbnails from voxel formats Support bigger volume sizes for a few formats Don't polute the home directory with build dir settings Fixed gamma handling in shaders Added bookmark support to the ui dialog Thumbnailer: Added qbcl thumbnail support VoxEdit: Render the inactive layer in grayscale mode","title":"0.0.14 (2021-11-21)"},{"location":"CHANGELOG/#0013-2021-10-29","text":"General: Logfile support added Fixed windows DLL handling for animation hot reloading UI: Fixed log notifications taking away the focus from the current widget VoxEdit: Fixed windows OpenGL error while rendering the viewport","title":"0.0.13 (2021-10-29)"},{"location":"CHANGELOG/#0012-2021-10-26","text":"General: Fixed a few windows compilation issues Fixed issues in the automated build pipelines to produce windows binaries","title":"0.0.12 (2021-10-26)"},{"location":"CHANGELOG/#0011-2021-10-25","text":"General: Added url command Reduced memory allocations per frame Added key bindings dialog Added notifications for warnings and errors in the ui Fixed Sandbox Voxedit VXM v12 loading and added saving support Fixed MagicaVoxel vox file rotation handling VoxEdit: Removed old ui and switched to dearimgui Added lua script editor Added noise api support to the lua scripts","title":"0.0.11 (2021-10-25)"},{"location":"CHANGELOG/#0010-2021-09-19","text":"General: Added --version and -v commandline option to show the current version of each application Fixed texture coordinate indices for multi layer obj exports Improved magicavoxel transform support for some models Fixed magicavoxel x-axis handling Support newer versions of vxm and vxr Fixed bug in file dialog which prevents you to delete characters #77 VoxEdit: Improved scene edit mode Progress on the ui conversion to dearimgui Tools: Rewrote the ai debugger","title":"0.0.10 (2021-09-19)"},{"location":"CHANGELOG/#009-2020-10-03","text":"General: Fixed obj texcoord export: Sampling the borders of the texel now Added multi object support to obj export","title":"0.0.9 (2020-10-03)"},{"location":"CHANGELOG/#008-2020-09-30","text":"General: Added obj and ply export support Restructured the documentation Improved font support for imgui ui Backend: Reworked ai debugging network protocol Optimized behaviour tree filters","title":"0.0.8 (2020-09-30)"},{"location":"CHANGELOG/#007-2020-09-15","text":"General: Fixed wrong-name-for-symlinks shown Added support for writing qef files Added lua script interface to generate voxels Added stacktrace support for windows Refactored module structure (split app and core) Optimized character animations Hot reload character animation C++ source changes in debug builds Added quaternion lua support Updated external dependencies Refactored lua bindings Support Chronovox-Studio files (csm) Support Nick's Voxel Model files (nvm) Support more versions of the vxm format VoxEdit: Converted some voxel generation functions to lua Implemented new voxel generator scripts","title":"0.0.7 (2020-09-15)"},{"location":"CHANGELOG/#006-2020-08-02","text":"General: Fixed gamma cvar usage Enable vsync by default Updated external dependencies Activated OpenCL in a few tools Added symlink support to virtual filesystem VoxEdit: Fixed loading palette lua script with material definitions Fixed error in resetting mirror axis Fixed noise generation Reduced palette widget size Fixed palette widget being invisible on some dpi scales","title":"0.0.6 (2020-08-02)"},{"location":"CHANGELOG/#005-2020-07-26","text":"Client: Fixed movement Server: Fixed visibility check Fixed segfault while removing npcs VoxEdit: Started to add scene mode edit support (move volumes) VoxConvert: Support different palette files (cvar palette ) Support writing outside the registered application paths Allow to overwrite existing files General: Switched to qb as default volume format Improved scene graph support for Magicavoxel vox files Fixed invisible voxels for qb and qbt (Qubicle) volume format Support automatic loading different volume formats for assets Support Command&Conquer vxl files Support Ace of Spades map files (vxl) Support Qubicle exchange format (qef) Perform mesh extraction in dedicated threads for simple volume rendering Improved gizmo rendering and translation support Fixed memory leaks on shutdown Improved profiling support via tracy","title":"0.0.5 (2020-07-26)"},{"location":"CHANGELOG/#004-2020-06-07","text":"General: Added support for writing binvox files Added support for reading kvx (Build-Engine) and kv6 (SLAB6) voxel volumes Performed some AFL hardening on voxel format code Don't execute keybindings if the console is active Added basic shader storage buffer support Reduced voxel vertex size from 16 to 8 bytes Apply checkerboard pattern to water surface Improved tracy profiling support A few highdpi fixes Server: Allow to specify the database port Fixed loading database chunks VoxEdit: Added scale console command to produce LODs VoxConvert: Added ability to merge all layers into one","title":"0.0.4 (2020-06-07)"},{"location":"CHANGELOG/#003-2020-05-17","text":"Assets: Added music tracks Updated and added some new voxel models VoxEdit: Made some commands available to the ui Tweak thicken command Updated default tree generation ui values Save layers to all supported formats Fixed tree generation issue for some tree types Changed default reference position to be at the center bottom Reduced max supported volume size General: Print stacktraces on asserts Improved tree generation (mainly used in voxedit) Fixed a few asserts in debug mode for the microsoft stl Added debian package support Fixed a few undefined behaviour issues and integer overflows that could lead to problems Reorganized some modules to speed up compilation and linking times Improved audio support Fixed timing issues Fixed invalid GL states after deleting objects VoxConvert: Added a new tool to convert different voxel volumes between supported formats Currently supported are cub (CubeWorld), vox (MagicaVoxel), vmx (VoxEdit Sandbox), binvox and qb/qbt (Qubicle) Client: Added footstep and ambience sounds","title":"0.0.3 (2020-05-17)"},{"location":"CHANGELOG/#002-2020-05-06","text":"VoxEdit: Static linked VC++ Runtime Extract voxels by color into own layers Updated tree and noise windows Implemented thicken console command Escape abort modifier action Added L-System panel General: Fixed binvox header parsing Improved compilation speed Fixed compile errors with locally installed glm 0.9.9 Fixed setup-documentation errors Fixed shader pipeline rebuilds if included shader files were modified Improved palm tree generator Optimized mesh extraction for the world (streaming volumes) Added new voxel models (Re-)added Tracy profiler support and removed own imgui-based implementation Fixed writing of key bindings Improved compile speed and further removed the STL from a lot of places Updated all dependencies to their latest version Server/Client: Added DBChunkPersister Built-in HTTP server to download the chunks Replaced ui for the client Voxel rendering Implemented reflection for water surfaces Apply checkerboard pattern to voxel surfaces Up-scaling effect for new voxel chunks while they pop in Optimized rendering by not using one giant vbo","title":"0.0.2 (2020-05-06)"},{"location":"CHANGELOG/#001-initial-release-2020-02-08","text":"VoxEdit: initial release","title":"0.0.1 \"Initial Release\" (2020-02-08)"},{"location":"Compilation/","text":"Building The project should work on Linux, Windows and OSX. It should work with any ide that is either supported by cmake or has direct cmake support. Personally I'm using vscode with clangd at the moment. But also the command line with plain old make . Linux There is a Makefile wrapper around the build system. You can just run make in the project root folder. Every project has some extra CMake targets. There are e.g. voxedit-run , voxedit-debug and voxedit-perf if the needed tools were found during cmake's configure phase. That means that you can compile a single target by typing make voxedit , run it by typing make voxedit-run , debug it by typing make voxedit-debug and profile it by typing make voxedit-perf . There are also other targets for valgrind - just use the tab completion in the build folder to get a list. Windows The project should be buildable with every ide that supports cmake. QTCreator, Eclipse CDT, vscode or Visual Studio. Just install cmake, generate the project files, and open them in your ide. Visual Studio Code Install ninja ninja-build.org Install cmake cmake.org/download Install vscode code.visualstudio.com Install Visual Studio (for the compiler) Inside vscode you have to install the c++ plugins. The easiest might be to install the c++ plugins from microsoft. Just make sure the cmake plugin is part of the collection. If you have problems with the intellisense plugin from microsoft, you can also use the clangd plugin. Open your git clone directory in vscode and let it configure via cmake. It will pick ninja and the visual studio compiler automatically. Mac You can generate your xcode project via cmake or build like this: mkdir build cd build cmake .. cmake --build . If you are using the cmake Makefile generator, you get the same targets as for Linux above. You can also just type make voxedit-run to compile and run only VoxEdit. Hints If you encounter any problems, it's also a good start to check out the build pipelines of the project. This is always the most up-to-date information about how-to-build-the-project that you will find. But also please don't hesitate to ask for help on our discord server .. Enforce bundled libs You can enforce the use of the bundled libs by putting a <LIB>_LOCAL=1 in your cmake cache. Example: By putting LUA54_LOCAL=1 into your cmake cache, you enforce the use of the bundled lua sources from contrib/libs/lua54 . Build doxygen Run make doc from the project root to execute doxygen. After that install the mcss theme as described here: mcss.mosra.cz/documentation/ .","title":"Building"},{"location":"Compilation/#building","text":"The project should work on Linux, Windows and OSX. It should work with any ide that is either supported by cmake or has direct cmake support. Personally I'm using vscode with clangd at the moment. But also the command line with plain old make .","title":"Building"},{"location":"Compilation/#linux","text":"There is a Makefile wrapper around the build system. You can just run make in the project root folder. Every project has some extra CMake targets. There are e.g. voxedit-run , voxedit-debug and voxedit-perf if the needed tools were found during cmake's configure phase. That means that you can compile a single target by typing make voxedit , run it by typing make voxedit-run , debug it by typing make voxedit-debug and profile it by typing make voxedit-perf . There are also other targets for valgrind - just use the tab completion in the build folder to get a list.","title":"Linux"},{"location":"Compilation/#windows","text":"The project should be buildable with every ide that supports cmake. QTCreator, Eclipse CDT, vscode or Visual Studio. Just install cmake, generate the project files, and open them in your ide.","title":"Windows"},{"location":"Compilation/#mac","text":"You can generate your xcode project via cmake or build like this: mkdir build cd build cmake .. cmake --build . If you are using the cmake Makefile generator, you get the same targets as for Linux above. You can also just type make voxedit-run to compile and run only VoxEdit.","title":"Mac"},{"location":"Compilation/#hints","text":"If you encounter any problems, it's also a good start to check out the build pipelines of the project. This is always the most up-to-date information about how-to-build-the-project that you will find. But also please don't hesitate to ask for help on our discord server ..","title":"Hints"},{"location":"Compilation/#enforce-bundled-libs","text":"You can enforce the use of the bundled libs by putting a <LIB>_LOCAL=1 in your cmake cache. Example: By putting LUA54_LOCAL=1 into your cmake cache, you enforce the use of the bundled lua sources from contrib/libs/lua54 .","title":"Enforce bundled libs"},{"location":"Compilation/#build-doxygen","text":"Run make doc from the project root to execute doxygen. After that install the mcss theme as described here: mcss.mosra.cz/documentation/ .","title":"Build doxygen"},{"location":"ComputeShaderTool/","text":"ComputeShaderTool This tool parses OpenCL shader files ( *.cl ) and generates C++ source files for them. Description The generator uses ComputeShaderTemplate.h.in and generates the files by doing some string replacements. There are several variables in the template file that are replaced by the generator. $includes$ $namespace$ $name$ $createkernels$ $shutdown$ $kernels$ The parser includes a preprocessor.","title":"Compute Shader integration"},{"location":"ComputeShaderTool/#computeshadertool","text":"This tool parses OpenCL shader files ( *.cl ) and generates C++ source files for them.","title":"ComputeShaderTool"},{"location":"ComputeShaderTool/#description","text":"The generator uses ComputeShaderTemplate.h.in and generates the files by doing some string replacements. There are several variables in the template file that are replaced by the generator. $includes$ $namespace$ $name$ $createkernels$ $shutdown$ $kernels$ The parser includes a preprocessor.","title":"Description"},{"location":"Configuration/","text":"Configuration Variables The engine can get configured by so called cvars (configuration variables). These variables can be modified from within the game via key bindings, in-game console, the ui or scripts. To get a list of supported cvars (they might differ from application to application), type the command cvarlist to the in-game console ( CTRL+Tab in the default binding). The variables can get their initial value from various sources. The highest order is the command line. If you specify it on the command line, every other method will not be used. If the engine finds the cvar name in your environment variables, this one will take precendence over the one the is found in the configuration file. Next is the configuration file - this one will take precendence over the default settings that are specified in the code. The environment variable can be either lower case or upper case. For example it will work if you have CL_WIDTH or cl_width exported. The lower case variant has the higher priority. Commandline ./vengi-voxvonvert -set voxformat_scale 2.0 [...] Environment export VOXFORMAT_SCALE=2.0 ./vengi-voxconvert [...] Configuration file Linux: ~/.local/share/vengi/voxconvert/voxconvert.vars Windows: C:/Users/bob/AppData/Roaming/vengi/voxconvert/voxconvert.vars Mac: /Users/bob/Library/Application Support/vengi/voxconvert/voxconvert.vars Search paths You can get a list of search paths by calling the particular application with the --help parameter on the command line. This will print a list of search paths. You can even add your own paths by setting the cvar core_path . For packagers it might be interesting to set the PKGDATADIR cmake variable. Commands To get a list of supported commands (they might differ from application to application), type the command cmdlist to the in-game console ( CTRL+Tab in the default binding). You can also get a list when doing ./vengi-app --help on the command line. Key bindings You can also modify or add key bindings to commands. Type bindlist to the console to get a list of the current active bindings (and also here: they might differ from application to application). The command bind can be used to configure keybindings on-the-fly. These bindings are saved to a file on shutdown. Logging You can either log via syslog (on unix) or to stdout (this might of course differ from platform to platform). The log level is configured by the core_loglevel variable. The lower the value, the more you see. 1 is the highest log level (trace), where 5 is the lowest log level (fatal error). General To get a rough usage overview, you can start an application with --help . It will print out the commands and configuration variables with a description and hints how to modify/use them. Video settings cl_vsync : enable or disable v-sync cl_gamma : tweak the gamma value that is applied last on rendering cl_width : the window width cl_height : the window height cl_display : the display index if you are using multiple monitors [0-numDisplays) cl_fullscreen : true or 1 to run the window-based applications in fullscreen mode","title":"Configuration"},{"location":"Configuration/#configuration","text":"","title":"Configuration"},{"location":"Configuration/#variables","text":"The engine can get configured by so called cvars (configuration variables). These variables can be modified from within the game via key bindings, in-game console, the ui or scripts. To get a list of supported cvars (they might differ from application to application), type the command cvarlist to the in-game console ( CTRL+Tab in the default binding). The variables can get their initial value from various sources. The highest order is the command line. If you specify it on the command line, every other method will not be used. If the engine finds the cvar name in your environment variables, this one will take precendence over the one the is found in the configuration file. Next is the configuration file - this one will take precendence over the default settings that are specified in the code. The environment variable can be either lower case or upper case. For example it will work if you have CL_WIDTH or cl_width exported. The lower case variant has the higher priority.","title":"Variables"},{"location":"Configuration/#configuration-file","text":"Linux: ~/.local/share/vengi/voxconvert/voxconvert.vars Windows: C:/Users/bob/AppData/Roaming/vengi/voxconvert/voxconvert.vars Mac: /Users/bob/Library/Application Support/vengi/voxconvert/voxconvert.vars","title":"Configuration file"},{"location":"Configuration/#search-paths","text":"You can get a list of search paths by calling the particular application with the --help parameter on the command line. This will print a list of search paths. You can even add your own paths by setting the cvar core_path . For packagers it might be interesting to set the PKGDATADIR cmake variable.","title":"Search paths"},{"location":"Configuration/#commands","text":"To get a list of supported commands (they might differ from application to application), type the command cmdlist to the in-game console ( CTRL+Tab in the default binding). You can also get a list when doing ./vengi-app --help on the command line.","title":"Commands"},{"location":"Configuration/#key-bindings","text":"You can also modify or add key bindings to commands. Type bindlist to the console to get a list of the current active bindings (and also here: they might differ from application to application). The command bind can be used to configure keybindings on-the-fly. These bindings are saved to a file on shutdown.","title":"Key bindings"},{"location":"Configuration/#logging","text":"You can either log via syslog (on unix) or to stdout (this might of course differ from platform to platform). The log level is configured by the core_loglevel variable. The lower the value, the more you see. 1 is the highest log level (trace), where 5 is the lowest log level (fatal error).","title":"Logging"},{"location":"Configuration/#general","text":"To get a rough usage overview, you can start an application with --help . It will print out the commands and configuration variables with a description and hints how to modify/use them.","title":"General"},{"location":"Configuration/#video-settings","text":"cl_vsync : enable or disable v-sync cl_gamma : tweak the gamma value that is applied last on rendering cl_width : the window width cl_height : the window height cl_display : the display index if you are using multiple monitors [0-numDisplays) cl_fullscreen : true or 1 to run the window-based applications in fullscreen mode","title":"Video settings"},{"location":"Dependencies/","text":"Dependencies cmake ninja-build or make compiler (see compilation docs) Libraries development headers/libs for glm lua >= 5.4 sdl2 > 2.0.16 postgresql-server-dev >= 12 libpq enet libuv gtest (and gmock) opencl (optional) libuuid Some of these dependencies might not be available as packages in your toolchain - most of them are also bundled with the application. But local installed headers always have the higher priority. Usually you don't have to install anything of these. Debian apt-get install libglm-dev lua5.4 liblua5.4-dev libsdl2-dev postgresql-server-dev-all \\ libpq-dev libenet-dev opencl-c-headers \\ wayland-protocols pkg-config uuid-dev libsdl2-mixer-dev libuv1-dev If you want to run the database server locally, you have to install the postgres server package: apt-get install postgresql-10 postgresql-contrib CREATE EXTENSION pgcrypto; Arch pacman -Sy git make cmake ninja libuv sdl2 clang MacPorts port install postgresql95-server Brew brew install libuv sdl2 libpq sdl2_mixer Windows vcpkg install sdl2 libuv libpq lua glm glslang gtest","title":"Dependencies"},{"location":"Dependencies/#dependencies","text":"cmake ninja-build or make compiler (see compilation docs)","title":"Dependencies"},{"location":"Dependencies/#libraries","text":"development headers/libs for glm lua >= 5.4 sdl2 > 2.0.16 postgresql-server-dev >= 12 libpq enet libuv gtest (and gmock) opencl (optional) libuuid Some of these dependencies might not be available as packages in your toolchain - most of them are also bundled with the application. But local installed headers always have the higher priority. Usually you don't have to install anything of these.","title":"Libraries"},{"location":"Dependencies/#debian","text":"apt-get install libglm-dev lua5.4 liblua5.4-dev libsdl2-dev postgresql-server-dev-all \\ libpq-dev libenet-dev opencl-c-headers \\ wayland-protocols pkg-config uuid-dev libsdl2-mixer-dev libuv1-dev If you want to run the database server locally, you have to install the postgres server package: apt-get install postgresql-10 postgresql-contrib CREATE EXTENSION pgcrypto;","title":"Debian"},{"location":"Dependencies/#arch","text":"pacman -Sy git make cmake ninja libuv sdl2 clang","title":"Arch"},{"location":"Dependencies/#macports","text":"port install postgresql95-server","title":"MacPorts"},{"location":"Dependencies/#brew","text":"brew install libuv sdl2 libpq sdl2_mixer","title":"Brew"},{"location":"Dependencies/#windows","text":"vcpkg install sdl2 libuv libpq lua glm glslang gtest","title":"Windows"},{"location":"Formats/","text":"Formats Name Extension Loading Saving Thumbnails Palette Binary Spec Ace Of Spades vxl X X X spec BinVox binvox X X X X spec Build engine kvx X X X X spec Chronovox-Studio csm X X X Command and Conquer vxl X X X X X spec CubeWorld cub X X X X GL Transmission Format gltf X X X spec Goxel gox X X X X MagicaVoxel vox X X X X X spec Minecraft Level dat X X X X Minecraft Region mcr X X X X spec Minecraft Schematics schematic X X X X spec Minecraft Schematics schem X X X X spec Minecraft Schematics nbt X X X X spec Nick's Voxel Model nvm X X X Quake 1/UFO:Alien Invasion bsp X Qubicle Binary Tree qbt X X X X spec Qubicle Binary qb X X X X spec Qubicle Exchange qef X X X spec Qubicle Project qbcl X X X X spec Sandbox VoxEdit Collection vxc X X Sandbox VoxEdit Model vxm X X X X X Sandbox VoxEdit Hierarchy vxr X X X X Sandbox VoxEdit Tileset vxt X X SLAB6 kv6 X X X X spec Sproxel csv X X X spec StarMade sment X X X spec Standard Triangle Language stl X X Wavefront Object obj X X Meshes Exporting to ply, gltf, stl and obj is also supported. A few cvars exists to tweak the output of the meshing: voxformat_ambientocclusion : Don't export extra quads for ambient occlusion voxels voxformat_mergequads : Merge similar quads to optimize the mesh voxformat_reusevertices : Reuse vertices or always create new ones voxformat_scale : Scale the vertices on all axis by the given factor voxformat_scale_x : Scale the vertices on X axis by the given factor voxformat_scale_y : Scale the vertices on Y axis by the given factor voxformat_scale_z : Scale the vertices on Z axis by the given factor voxformat_quads : Export to quads voxformat_withcolor : Export vertex colors voxformat_withtexcoords : Export texture coordinates voxformat_transform_mesh : Apply the keyframe transform to the mesh Basic voxelization is supported for ply, gltf, stl, bsp and obj files, too. The following cvars can be modified here: voxformat_fillhollow : Fill the inner parts of completely close objects voxformat_scale : Scale the vertices on all axis by the given factor voxformat_scale_x : Scale the vertices on X axis by the given factor voxformat_scale_y : Scale the vertices on Y axis by the given factor voxformat_scale_z : Scale the vertices on Z axis by the given factor","title":"Formats"},{"location":"Formats/#formats","text":"Name Extension Loading Saving Thumbnails Palette Binary Spec Ace Of Spades vxl X X X spec BinVox binvox X X X X spec Build engine kvx X X X X spec Chronovox-Studio csm X X X Command and Conquer vxl X X X X X spec CubeWorld cub X X X X GL Transmission Format gltf X X X spec Goxel gox X X X X MagicaVoxel vox X X X X X spec Minecraft Level dat X X X X Minecraft Region mcr X X X X spec Minecraft Schematics schematic X X X X spec Minecraft Schematics schem X X X X spec Minecraft Schematics nbt X X X X spec Nick's Voxel Model nvm X X X Quake 1/UFO:Alien Invasion bsp X Qubicle Binary Tree qbt X X X X spec Qubicle Binary qb X X X X spec Qubicle Exchange qef X X X spec Qubicle Project qbcl X X X X spec Sandbox VoxEdit Collection vxc X X Sandbox VoxEdit Model vxm X X X X X Sandbox VoxEdit Hierarchy vxr X X X X Sandbox VoxEdit Tileset vxt X X SLAB6 kv6 X X X X spec Sproxel csv X X X spec StarMade sment X X X spec Standard Triangle Language stl X X Wavefront Object obj X X","title":"Formats"},{"location":"Formats/#meshes","text":"Exporting to ply, gltf, stl and obj is also supported. A few cvars exists to tweak the output of the meshing: voxformat_ambientocclusion : Don't export extra quads for ambient occlusion voxels voxformat_mergequads : Merge similar quads to optimize the mesh voxformat_reusevertices : Reuse vertices or always create new ones voxformat_scale : Scale the vertices on all axis by the given factor voxformat_scale_x : Scale the vertices on X axis by the given factor voxformat_scale_y : Scale the vertices on Y axis by the given factor voxformat_scale_z : Scale the vertices on Z axis by the given factor voxformat_quads : Export to quads voxformat_withcolor : Export vertex colors voxformat_withtexcoords : Export texture coordinates voxformat_transform_mesh : Apply the keyframe transform to the mesh Basic voxelization is supported for ply, gltf, stl, bsp and obj files, too. The following cvars can be modified here: voxformat_fillhollow : Fill the inner parts of completely close objects voxformat_scale : Scale the vertices on all axis by the given factor voxformat_scale_x : Scale the vertices on X axis by the given factor voxformat_scale_y : Scale the vertices on Y axis by the given factor voxformat_scale_z : Scale the vertices on Z axis by the given factor","title":"Meshes"},{"location":"LUAScript/","text":"Scripting api There is a console command (called xs ) in voxedit and a command line parameter in voxconvert to execute lua scripts for generating voxels. This command expects the lua script filename ( .lua can be omitted) and the additional arguments for the main() method. If you are new to lua you can read more about it on lua-users . voxedit Calling xs <script> help (in the script console) will print the supported arguments for the given script file in voxedit. voxconvert ./vengi-voxconvert --script \"<script> help\" --scriptcolor 1 --input in.qb --output out.qb --scriptcolor defines the color palette index that is given to the script as parameter. By default the script files will be searched in a scripts folder next to where the binary is located and in the usual search paths (see configuration for more details). You can also give the full path to the script file. There are two functions in each script. One is called arguments and one main . arguments returns a list of parameters for the main function. The default parameters for main are node , region and color . color is the palette index starting from 0 . Examples Without parameters function main(node, region, color) local volume = node:volume() local mins = region:mins() local maxs = region:maxs() for x = mins.x, maxs.x do for y = mins.y, maxs.y do for z = mins.z, maxs.z do volume:setVoxel(x, y, z, color) end end end end Execute this via console xs scriptfile With one parameter function arguments() return { { name = 'n', desc = 'height level delta', type = 'int', default = '2' } } end function main(node, region, color, n) [...] end Execute this via console xs scriptfile 1 where 1 will be the value of n . Omitting the 1 will add the default value from the argument list. Find the best palette match function main(node, region, color) -- find match (palette index) for red in the current palette (RGB value) -- this value can be used in e.g. volume:setVoxel(x, y, z, match) local match = node:palette().match(255, 0, 0) [...] end This will find the best match in the currently used palette and return the index. Arguments Supported type s are: int : min , max values are supported, too float : min , max values are supported, too enum : enum as a property specifies a list of string separated by , str : string input colorindex : a color index from current palette (clamped) bool : The desc ription field is just for the user interface of the script parameter list. A default value can get set, too. The order in the arguments table defines the order in which the arguments are passed over to the script. SceneGraph scenegraph lets you access different nodes or create new ones. The functions are: new(name, region[, visible]) : Creates a new node with the given name , the size and position according to the region and an optional visible parameter. get([nodeId]) : Returns the node for the given nodeId - if the nodeId is not given, it will return the current active node. Which by default is the node for the volume the script is currently executed for. SceneGraphNode name() : Returns the current name of the node. setName(string) : Set the name of the node. palette() : Returns the current palette of the node. setPalette(palette) : Change the palette volume() : Gives you access to the volume of the node. Access these functions like this: local scenegraphnode = [...] local name = scenegraphnode:name() Color The node palette ( node:palette() ) has several methods to work with colors. E.g. to find a closest possible match for the given palette index. The functions are: color(paletteIndex) : Pushes the vec4 of the color behind the palette index ( 0-255 ) as float values between 0.0 and 1.0 . colors() : Returns the palette RGBA colors as vec4 values. match(r, g, b) : Returns the closest possible palette color match for the given RGB ( 0-255 ) color. The returned palette index is in the range 0-255 . This value can then be used for the setVoxel method. similar(paletteindex, [coloramount]) : Return a table with similar colors given by their palette index. They are available as e.g. palette:color([...]) , palette:match([...]) and so on. Noise The global noise supports a few noise generators: noise2(v) , noise3(v) , noise4(v) : Simplex noise. Uses the given vec2 , vec3 or vec4 and returns a float value between 0.0 and 1.0 . fBm2(v, octaves, lacunarity, gain) , fBm3(v, octaves, lacunarity, gain) , fBm4(v, octaves, lacunarity, gain) : Simplex noise fractal brownian motion sum. Uses the given vec2 , vec3 or vec4 and returns a float value between 0.0 and 1.0 . ridgedMF2(v, offset, octaves, lacunarity, gain) , ridgedMF3(v, offset, octaves, lacunarity, gain) , ridgedMF4(v, offset, octaves, lacunarity, gain) : Simplex ridged multi-fractal noise sum. Uses the given vec2 , vec3 or vec4 and returns a float value between 0.0 and 1.0 . swissTurbulence(vec2, offset, octaves, lacunarity, gain, warp) : blog post voronoi(vec3, [frequency, seed, enableDistance]) : Voronoi noise. worley2(v) , worley3(v) : Simplex cellular/worley noise. Uses the given vec2 or vec3 and returns a float value between 0.0 and 1.0 . They are available as e.g. noise.noise2([...]) , noise.fBm3([...]) and so on. Region mins() : The lower boundary of the region (inclusive). maxs() : The upper boundary of the region (inclusive). size() : The size of the region in voxels ( ivec3 ). setMins(mins) : The lower boundary of the region - given as ivec3 . setMaxs(maxs) : The upper boundary of the region - given as ivec3 . x() : The lower x boundary of the region. y() : The lower y boundary of the region. z() : The lower z bounary of the region. width() : The width of the region measured in voxels. height() : The height of the region measured in voxels. depth() : The depth of the region measured in voxels. Access these functions like this: local region = [...] local mins = region:mins() Volume voxel(x, y, z) : Returns the palette index of the voxel at the given position in the volume [0-255] . Or -1 if there is no voxel. region() : Return the region of the volume. fillHollows([color]) : Tries to fill all hollows in the volume. importHeightmap(filename, [underground], [surface]) : Imports the given image as heightmap into the current volume. Use the underground and surface voxel colors for this (or pick some defaults if they were not specified). Also see importColoredHeightmap if you want to colorize your surface. importColoredHeightmap(filename, [underground]) : Imports the given image as heightmap into the current volume. Use the underground voxel colors for this and determine the surface colors from the RGB channel of the given image. Other than with importHeightmap the height is encoded in the alpha channel with this method. crop() : Crop the volume and remove empty spaces. mirrorAxis([axis]) : Mirror along the given axis - y is default. rotateAxis([axis]) : Rotate along the given axis - y is default. translate(x, [y, z]) : Translates the region of the volume. Keep in mind that this is not supported by every output format. resize(x, [y, z, extendMins]) : Resize the volume by the given sizes. If extendsMins is true the region dimensions are also increased on the lower corner. setVoxel(x, y, z, color) : Set the given color at the given coordinates in the volume. color must be in the range [0-255] or -1 to delete the voxel. Access these functions like this: local volume = [...] local region = volume:region() Vectors Available vector types are vec2 , vec3 , vec4 and their integer types ivec2 , ivec3 , ivec4 . Access these functions like this: local v1 = ivec3.new(1, 1, 1) There are 3 possible components for this vector. You can also call ivec3.new(1) to fill all three values with a one. Or call it like this: ivec3.new(1, 2) to create a vector with the three components of 1, 2, 2 . Other y going upwards. You have access to the cvar and cmd lua bindings, too. This means that you can access any cvar value or execute any command like layeradd or layermerge to modify the whole scene. cmd.execute(\"echo test\") var.int(\"cl_gamma\") To get a full list of commands and cvars use the console command cmdlist and cvarlist . Available scripts cover.lua Generates a new voxel on top of others with the current selected color and the specified height. xs cover.lua 1 grass.lua Generate grass on top of voxels. xs grass.lua grid.lua Generates a grid with given color, thickness and size. xs grid.lua 1 1 5 5 5 noise.lua Generates perlin noise with the frequency and amplitude as parameters with the current selected color. xs noise.lua 0.3 1.0 pyramid.lua Generates a pyramid with the current selected color and with each level being 3 voxels high. xs pyramid.lua 3 thicken.lua Thickens the voxel - take 1 voxel and convert to 8 voxels (creates a new node for the result). xs thicken.lua 1 others There are other scripts available in the repository .","title":"Scripting api"},{"location":"LUAScript/#scripting-api","text":"There is a console command (called xs ) in voxedit and a command line parameter in voxconvert to execute lua scripts for generating voxels. This command expects the lua script filename ( .lua can be omitted) and the additional arguments for the main() method. If you are new to lua you can read more about it on lua-users . voxedit Calling xs <script> help (in the script console) will print the supported arguments for the given script file in voxedit. voxconvert ./vengi-voxconvert --script \"<script> help\" --scriptcolor 1 --input in.qb --output out.qb --scriptcolor defines the color palette index that is given to the script as parameter. By default the script files will be searched in a scripts folder next to where the binary is located and in the usual search paths (see configuration for more details). You can also give the full path to the script file. There are two functions in each script. One is called arguments and one main . arguments returns a list of parameters for the main function. The default parameters for main are node , region and color . color is the palette index starting from 0 .","title":"Scripting api"},{"location":"LUAScript/#examples","text":"","title":"Examples"},{"location":"LUAScript/#arguments","text":"Supported type s are: int : min , max values are supported, too float : min , max values are supported, too enum : enum as a property specifies a list of string separated by , str : string input colorindex : a color index from current palette (clamped) bool : The desc ription field is just for the user interface of the script parameter list. A default value can get set, too. The order in the arguments table defines the order in which the arguments are passed over to the script.","title":"Arguments"},{"location":"LUAScript/#scenegraph","text":"scenegraph lets you access different nodes or create new ones. The functions are: new(name, region[, visible]) : Creates a new node with the given name , the size and position according to the region and an optional visible parameter. get([nodeId]) : Returns the node for the given nodeId - if the nodeId is not given, it will return the current active node. Which by default is the node for the volume the script is currently executed for.","title":"SceneGraph"},{"location":"LUAScript/#scenegraphnode","text":"name() : Returns the current name of the node. setName(string) : Set the name of the node. palette() : Returns the current palette of the node. setPalette(palette) : Change the palette volume() : Gives you access to the volume of the node. Access these functions like this: local scenegraphnode = [...] local name = scenegraphnode:name()","title":"SceneGraphNode"},{"location":"LUAScript/#color","text":"The node palette ( node:palette() ) has several methods to work with colors. E.g. to find a closest possible match for the given palette index. The functions are: color(paletteIndex) : Pushes the vec4 of the color behind the palette index ( 0-255 ) as float values between 0.0 and 1.0 . colors() : Returns the palette RGBA colors as vec4 values. match(r, g, b) : Returns the closest possible palette color match for the given RGB ( 0-255 ) color. The returned palette index is in the range 0-255 . This value can then be used for the setVoxel method. similar(paletteindex, [coloramount]) : Return a table with similar colors given by their palette index. They are available as e.g. palette:color([...]) , palette:match([...]) and so on.","title":"Color"},{"location":"LUAScript/#noise","text":"The global noise supports a few noise generators: noise2(v) , noise3(v) , noise4(v) : Simplex noise. Uses the given vec2 , vec3 or vec4 and returns a float value between 0.0 and 1.0 . fBm2(v, octaves, lacunarity, gain) , fBm3(v, octaves, lacunarity, gain) , fBm4(v, octaves, lacunarity, gain) : Simplex noise fractal brownian motion sum. Uses the given vec2 , vec3 or vec4 and returns a float value between 0.0 and 1.0 . ridgedMF2(v, offset, octaves, lacunarity, gain) , ridgedMF3(v, offset, octaves, lacunarity, gain) , ridgedMF4(v, offset, octaves, lacunarity, gain) : Simplex ridged multi-fractal noise sum. Uses the given vec2 , vec3 or vec4 and returns a float value between 0.0 and 1.0 . swissTurbulence(vec2, offset, octaves, lacunarity, gain, warp) : blog post voronoi(vec3, [frequency, seed, enableDistance]) : Voronoi noise. worley2(v) , worley3(v) : Simplex cellular/worley noise. Uses the given vec2 or vec3 and returns a float value between 0.0 and 1.0 . They are available as e.g. noise.noise2([...]) , noise.fBm3([...]) and so on.","title":"Noise"},{"location":"LUAScript/#region","text":"mins() : The lower boundary of the region (inclusive). maxs() : The upper boundary of the region (inclusive). size() : The size of the region in voxels ( ivec3 ). setMins(mins) : The lower boundary of the region - given as ivec3 . setMaxs(maxs) : The upper boundary of the region - given as ivec3 . x() : The lower x boundary of the region. y() : The lower y boundary of the region. z() : The lower z bounary of the region. width() : The width of the region measured in voxels. height() : The height of the region measured in voxels. depth() : The depth of the region measured in voxels. Access these functions like this: local region = [...] local mins = region:mins()","title":"Region"},{"location":"LUAScript/#volume","text":"voxel(x, y, z) : Returns the palette index of the voxel at the given position in the volume [0-255] . Or -1 if there is no voxel. region() : Return the region of the volume. fillHollows([color]) : Tries to fill all hollows in the volume. importHeightmap(filename, [underground], [surface]) : Imports the given image as heightmap into the current volume. Use the underground and surface voxel colors for this (or pick some defaults if they were not specified). Also see importColoredHeightmap if you want to colorize your surface. importColoredHeightmap(filename, [underground]) : Imports the given image as heightmap into the current volume. Use the underground voxel colors for this and determine the surface colors from the RGB channel of the given image. Other than with importHeightmap the height is encoded in the alpha channel with this method. crop() : Crop the volume and remove empty spaces. mirrorAxis([axis]) : Mirror along the given axis - y is default. rotateAxis([axis]) : Rotate along the given axis - y is default. translate(x, [y, z]) : Translates the region of the volume. Keep in mind that this is not supported by every output format. resize(x, [y, z, extendMins]) : Resize the volume by the given sizes. If extendsMins is true the region dimensions are also increased on the lower corner. setVoxel(x, y, z, color) : Set the given color at the given coordinates in the volume. color must be in the range [0-255] or -1 to delete the voxel. Access these functions like this: local volume = [...] local region = volume:region()","title":"Volume"},{"location":"LUAScript/#vectors","text":"Available vector types are vec2 , vec3 , vec4 and their integer types ivec2 , ivec3 , ivec4 . Access these functions like this: local v1 = ivec3.new(1, 1, 1) There are 3 possible components for this vector. You can also call ivec3.new(1) to fill all three values with a one. Or call it like this: ivec3.new(1, 2) to create a vector with the three components of 1, 2, 2 .","title":"Vectors"},{"location":"LUAScript/#other","text":"y going upwards. You have access to the cvar and cmd lua bindings, too. This means that you can access any cvar value or execute any command like layeradd or layermerge to modify the whole scene. cmd.execute(\"echo test\") var.int(\"cl_gamma\") To get a full list of commands and cvars use the console command cmdlist and cvarlist .","title":"Other"},{"location":"LUAScript/#available-scripts","text":"","title":"Available scripts"},{"location":"Network/","text":"Network layer The network layer is based on udp (enet) and shared between client and server. It uses flatbuffers to generate C++ classes from fbs files that defines the protocol. See the generate_protocol cmake macro on how to integrate them. Values that should be shared between client and server - for example our cooldown ids - are part of the protocol to always have them in sync with each other. Connection [client] connects [connection established] [client] sends UserConnect message [server] UserConnectHandler [server] performs auth [auth failed] => [server] sends AuthFailed message [auth successful] => [server] sends Seed [server] broadcasts to visible UserSpawn CVar replication There are cvars that are replicated to all players on a server. The flag for this is CV_REPLICATE . If the server changes a value of such a cvar, the change is automatically transfered to all connected clients. This cvar value is also initially for each new connection to ensure that the server and the client share the same values for these cvars. User related cvars that are broadcasted to other players are marked with CV_BROADCAST . These values are also submitted to any other player that can see the entity.","title":"Network"},{"location":"Network/#network-layer","text":"The network layer is based on udp (enet) and shared between client and server. It uses flatbuffers to generate C++ classes from fbs files that defines the protocol. See the generate_protocol cmake macro on how to integrate them. Values that should be shared between client and server - for example our cooldown ids - are part of the protocol to always have them in sync with each other.","title":"Network layer"},{"location":"Network/#connection","text":"[client] connects [connection established] [client] sends UserConnect message [server] UserConnectHandler [server] performs auth [auth failed] => [server] sends AuthFailed message [auth successful] => [server] sends Seed [server] broadcasts to visible UserSpawn","title":"Connection"},{"location":"Network/#cvar-replication","text":"There are cvars that are replicated to all players on a server. The flag for this is CV_REPLICATE . If the server changes a value of such a cvar, the change is automatically transfered to all connected clients. This cvar value is also initially for each new connection to ensure that the server and the client share the same values for these cvars. User related cvars that are broadcasted to other players are marked with CV_BROADCAST . These values are also submitted to any other player that can see the entity.","title":"CVar replication"},{"location":"Palette/","text":"Palette The engine is built around a palette of 256 colors. Custom palettes are supported. The images should have a 1x256 pixel dimension. You can import palettes from a lot of different image formats - or from voxel volume formats (if supported). The palette can usually be specified by a cvar and can either be a full path to a png file or an identifier. If you decide to use the identifier - e.g. nippon the palette cvar is set to this value and the engine will automatically search all registered file system paths for a file named palette-nippon.png .","title":"Palette"},{"location":"Palette/#palette","text":"The engine is built around a palette of 256 colors. Custom palettes are supported. The images should have a 1x256 pixel dimension. You can import palettes from a lot of different image formats - or from voxel volume formats (if supported). The palette can usually be specified by a cvar and can either be a full path to a png file or an identifier. If you decide to use the identifier - e.g. nippon the palette cvar is set to this value and the engine will automatically search all registered file system paths for a file named palette-nippon.png .","title":"Palette"},{"location":"Persistence/","text":"Persistence layer General This module manages the persistence layer and provides drivers to talk to the database. Currently the only driver implemented is for postgresql. The main class for doing database interaction is the DBHandler . In order to generate models that represent the tables, you can use the databasetool to generate the models from metadata files. A more high level class to manage updates is the PersistenceMgr . It collects dirty-marked models and performs a mass-delta-update via prepared statements. You should use this for e.g. player updates. It's always a good idea to check out the unit tests to get an idea of the functionality of those classes. DBHandler You have to create the models with the tbl file and generate C++ classes with the databasetool (see existing tables.tbl file CMake integrations. Usually you put your classes into the C++ namespace db . Once you have those models, you can use the generated getters and setters to prepare the model. This can now get send over to the DBHandler . There are methods to insert, update, count, delete or select particular entries from tables via the model values. Copying the Model class instance is no problem, it's fast. The stuff that is copied is only 32bytes at the moment. Create (and update) table _dbHandler->createOrUpdateTable(db::EventModel()); The persistence layer has automatic upgrading and downgrading support for your tables. By defining them in a .tbl file, the system is able to generate the needed ALTER statements to get to your desired state. Workflow to update a table: Edit the tbl file Run your build Run the application The table, constraint, sequence... is updated to the state that is defined in your code. This allows you to go back and forth in your commits to test things. But keep in mind that removing a column from a table can lead to data loss. Because re-adding it, doesn't remember the previous values of course. Select by condition _dbHandler->select(db::EventModel(), persistence::DBConditionOne(), [this] (db::EventModel&& model) { [...] }); Multiple search conditions const db::DBConditionTestModelEmail emailCond(\"a@b.c\"); const db::DBConditionTestModelName nameCond(\"Foo Bar\"); _dbHandler->select(db::TestModel(), persistence::DBConditionMultiple(true, {&emailCond, &nameCond})), [this] (db::TestModel&& model) { [...] }); PersistenceMgr This class is responsible to submit chunks for accumulated database updates. If you e.g. collect an item and soon after collect another one, this class will sum the items up and only generate one sql statement, instead of two. Databasetool Table descriptions for the databasetool The databasetool binary will generate model files for the table definitions given in *.tbl files. You can specify the fields, the constraints and set an operator for dealing with conflict states (more about that later). To add a new *.tbl file to a module and automatically generate code for that table definition, you have to add the following after your cmake add_library(${LIB} ${SRCS}) call: generate_db_models(${LIB} ${CMAKE_CURRENT_SOURCE_DIR}/tables.tbl ExampleModels.h) ExampleModels.h specifies a single header where all generated table models are put into. The generated models can be used with the DBHandler from the persistence module. Example If no classname is specified, the table name will be used with Model as postfix. Table user will be generated as UserModel class, if no other classname was specified All models will be put into a db namespace - even if you specify your own namespace. For more details, see the parameter description below. table <TABLENAME> { classname <STRING> (overrides the automatically determined name) namespace <STRING> (c++ namespace where the class is put into) schema <STRING> (default is public) field <FIELDNAME> { type <FIELDTYPE> (default: string) notnull (optional) length <LENGTH> (optional) operator <OPERATOR> (default: set) lowercase (optional) default <DEFAULTVALUE> (optional) } constraints { <FIELDNAME> unique <FIELDNAME> index <FIELDNAME> primarykey <FIELDNAME2> primarykey <FIELDNAME> autoincrement (<FIELD1>, <FIELD2>) unique <FIELDNAME> foreignkey <FOREIGNTABLE> <FOREIGNFIELD> } } table A definition starts with table <TABLENAME> . The body is enclosed by { and } . classname This can be used to override the auto generated class name. The auto generated class name is generated from the table name converted to UpperCamelCase. This converts a table name like my_table to MyTable or mytable to Mytable . namespace You specify a namespace in your table definition that is called mynamespace . The table is called MyTable . The resulting c++ class will live in mynamespace::db::MyTable . If you omit the namespace setting in your table definition, the class will live in db::MyTable . schema Specifies the schema name that should be used for the table. field A field describes a table column, the name, the type and so on. This block is enclosed by { and } . default The default value for the field. length Specifies the optional length of the field. notnull If this is specified, the field may not be null. operator The operator is taken into account when you execute an insert or update statement and hit a unique key violation. This can e.g. be used to increase or decrease points for particular keys. The first time you normally perform an insert - and the following times you will hit a key violation and thus perform the insert or update with the operator specified. The default operator is set . See a full list of valid operators below. Valid operators set add subtract lowercase Convert a string value to lowercase before entering it into the database. This may not be set for password types of course. type Valid field types password string text int long timestamp boolean short byte blob constraints Here you can specify foreign key constraints, auto increment values and so on. This block is enclosed by { and } . See the example above for a list of supported constraints. Other notable features Timestamps are handled in UTC. When using int or short as a field type, there is also a setter configured that accepts enums.","title":"Persistence"},{"location":"Persistence/#persistence-layer","text":"","title":"Persistence layer"},{"location":"Persistence/#general","text":"This module manages the persistence layer and provides drivers to talk to the database. Currently the only driver implemented is for postgresql. The main class for doing database interaction is the DBHandler . In order to generate models that represent the tables, you can use the databasetool to generate the models from metadata files. A more high level class to manage updates is the PersistenceMgr . It collects dirty-marked models and performs a mass-delta-update via prepared statements. You should use this for e.g. player updates. It's always a good idea to check out the unit tests to get an idea of the functionality of those classes.","title":"General"},{"location":"Persistence/#dbhandler","text":"You have to create the models with the tbl file and generate C++ classes with the databasetool (see existing tables.tbl file CMake integrations. Usually you put your classes into the C++ namespace db . Once you have those models, you can use the generated getters and setters to prepare the model. This can now get send over to the DBHandler . There are methods to insert, update, count, delete or select particular entries from tables via the model values. Copying the Model class instance is no problem, it's fast. The stuff that is copied is only 32bytes at the moment.","title":"DBHandler"},{"location":"Persistence/#persistencemgr","text":"This class is responsible to submit chunks for accumulated database updates. If you e.g. collect an item and soon after collect another one, this class will sum the items up and only generate one sql statement, instead of two.","title":"PersistenceMgr"},{"location":"Persistence/#databasetool","text":"","title":"Databasetool"},{"location":"ShaderTool/","text":"ShaderTool This tool parses GLSL shader files (mainly *.vert , *.frag , *.geom and *.comp ) and generates C++ source files for them. The cmake macros expect the shader source below the module in a shaders/ directory. set(SHADERS first second) generate_shaders(mymodulename ${SHADERS}) The shaders given in this example would be located at src/modules/mymodulename/shaders/first.* . The tool automatically detects the type of programs that should be connected in the final shader. The code is generated into the build directory in generated/shaders . Description The generator uses ShaderTemplate.h.in and UniformBufferTemplate.h.in as a base to generat the C++ source files. There are several variables in the template file that are replaced by the generator. $includes$ $namespace$ $name$ $setters$ $attributes$ $uniforms$ $uniformarrayinfo$ $shutdown$ $uniformbuffers$ The parser includes a preprocessor. You can export constants from the GLSL shader code to the generated C++ code by using $constant . Use $constant varname 42 to generate a method that returns 42 with a name getVarname Branching / Feature toggles Usually you don't have to use branching and uniforms for feature toggles. You can use cvars with the flag CV_SHADER set. If you are going to change one of these cvars, the shaders are recompiled with the value of the cvar given as preprocessor define. This means that you can do stuff like: #if cl_shadowmap == 1 [...] #else [...] #endif The #define of cl_shadowmap is done by the shader system at compile time.","title":"Shader integration"},{"location":"ShaderTool/#shadertool","text":"This tool parses GLSL shader files (mainly *.vert , *.frag , *.geom and *.comp ) and generates C++ source files for them. The cmake macros expect the shader source below the module in a shaders/ directory. set(SHADERS first second) generate_shaders(mymodulename ${SHADERS}) The shaders given in this example would be located at src/modules/mymodulename/shaders/first.* . The tool automatically detects the type of programs that should be connected in the final shader. The code is generated into the build directory in generated/shaders .","title":"ShaderTool"},{"location":"ShaderTool/#description","text":"The generator uses ShaderTemplate.h.in and UniformBufferTemplate.h.in as a base to generat the C++ source files. There are several variables in the template file that are replaced by the generator. $includes$ $namespace$ $name$ $setters$ $attributes$ $uniforms$ $uniformarrayinfo$ $shutdown$ $uniformbuffers$ The parser includes a preprocessor. You can export constants from the GLSL shader code to the generated C++ code by using $constant . Use $constant varname 42 to generate a method that returns 42 with a name getVarname","title":"Description"},{"location":"ShaderTool/#branching-feature-toggles","text":"Usually you don't have to use branching and uniforms for feature toggles. You can use cvars with the flag CV_SHADER set. If you are going to change one of these cvars, the shaders are recompiled with the value of the cvar given as preprocessor define. This means that you can do stuff like: #if cl_shadowmap == 1 [...] #else [...] #endif The #define of cl_shadowmap is done by the shader system at compile time.","title":"Branching / Feature toggles"},{"location":"TestAnimation/","text":"testanimation The test application can cycle through all animations and entity types. It helps to visualize the skeletal animation states of the entities in the game.","title":"testanimation"},{"location":"TestAnimation/#testanimation","text":"The test application can cycle through all animations and entity types. It helps to visualize the skeletal animation states of the entities in the game.","title":"testanimation"},{"location":"VisualTests/","text":"Visual Tests These tests are dedicated test applications. They are no unit tests. Unit tests are in their own module and available via make tests Run these test applications with make __directoryname__-run or by directly executing the generated binary after compiling them. testanimation Test the voxel animation module with a default character and items of the stock module. See this for more details. testimgui Test the dearimgui integration testglslgeom Test geometry shader integration testnuklear Test the nuklear imgui integration testcomputetexture3d Test the OpenCL 3d texture integration of a 3d voxel volume (rendered as 2d side view) testvoxelgpu OpenCL mesh extraction - not finished yet. testdepthbuffer Test the depth buffer integration with shadow maps and debug renderings testtexture Renders a test 2d image. testmesh Render a mesh with shadows and bones and normals. testcamera Test camera options and collisions. testvoxelfont Display a true type font as 3d voxel volume. testplane Renders a plane object. testshapebuilder testoctree Renders the octree internals. testglslcomp Uses GLSL compute shader to render a circle. testgpumc Conversion of OpenCL marching cubes taken from: https://github.com/smistad/GPU-Marching-Cubes.git testluaui Test the nuklear lua ui binding testoctreevisit Visit the frustum in the octree. testtemplate Just an empty template for new test applications. testhttpserver A test application around the http module server for e.g. fuzzy testing purposes. testbiomes A test application that just visualizes the biomes. testblur A test application that blures an image testbloom A test application that applies bloom to an image","title":"Visual Tests"},{"location":"VisualTests/#visual-tests","text":"These tests are dedicated test applications. They are no unit tests. Unit tests are in their own module and available via make tests Run these test applications with make __directoryname__-run or by directly executing the generated binary after compiling them.","title":"Visual Tests"},{"location":"VisualTests/#testanimation","text":"Test the voxel animation module with a default character and items of the stock module. See this for more details.","title":"testanimation"},{"location":"VisualTests/#testimgui","text":"Test the dearimgui integration","title":"testimgui"},{"location":"VisualTests/#testglslgeom","text":"Test geometry shader integration","title":"testglslgeom"},{"location":"VisualTests/#testnuklear","text":"Test the nuklear imgui integration","title":"testnuklear"},{"location":"VisualTests/#testcomputetexture3d","text":"Test the OpenCL 3d texture integration of a 3d voxel volume (rendered as 2d side view)","title":"testcomputetexture3d"},{"location":"VisualTests/#testvoxelgpu","text":"OpenCL mesh extraction - not finished yet.","title":"testvoxelgpu"},{"location":"VisualTests/#testdepthbuffer","text":"Test the depth buffer integration with shadow maps and debug renderings","title":"testdepthbuffer"},{"location":"VisualTests/#testtexture","text":"Renders a test 2d image.","title":"testtexture"},{"location":"VisualTests/#testmesh","text":"Render a mesh with shadows and bones and normals.","title":"testmesh"},{"location":"VisualTests/#testcamera","text":"Test camera options and collisions.","title":"testcamera"},{"location":"VisualTests/#testvoxelfont","text":"Display a true type font as 3d voxel volume.","title":"testvoxelfont"},{"location":"VisualTests/#testplane","text":"Renders a plane object.","title":"testplane"},{"location":"VisualTests/#testshapebuilder","text":"","title":"testshapebuilder"},{"location":"VisualTests/#testoctree","text":"Renders the octree internals.","title":"testoctree"},{"location":"VisualTests/#testglslcomp","text":"Uses GLSL compute shader to render a circle.","title":"testglslcomp"},{"location":"VisualTests/#testgpumc","text":"Conversion of OpenCL marching cubes taken from: https://github.com/smistad/GPU-Marching-Cubes.git","title":"testgpumc"},{"location":"VisualTests/#testluaui","text":"Test the nuklear lua ui binding","title":"testluaui"},{"location":"VisualTests/#testoctreevisit","text":"Visit the frustum in the octree.","title":"testoctreevisit"},{"location":"VisualTests/#testtemplate","text":"Just an empty template for new test applications.","title":"testtemplate"},{"location":"VisualTests/#testhttpserver","text":"A test application around the http module server for e.g. fuzzy testing purposes.","title":"testhttpserver"},{"location":"VisualTests/#testbiomes","text":"A test application that just visualizes the biomes.","title":"testbiomes"},{"location":"VisualTests/#testblur","text":"A test application that blures an image","title":"testblur"},{"location":"VisualTests/#testbloom","text":"A test application that applies bloom to an image","title":"testbloom"},{"location":"mapview/Index/","text":"General","title":"MapView"},{"location":"mapview/Index/#general","text":"","title":"General"},{"location":"openworld/GameDesign/","text":"Game Design This is about an mmorpg in a fantasy like world. The world is an active simulation where you \"jump\" into characters (ala Avatar). You inherit the characters abilities while you are jumped in. You learn some of the abilities in your own profile and can keep the abilities to some degree when you jump out of the character again. You will also leave some of the abilities at the entity when you jump out again. The world is divided by portals that connect islands. There is a max player amount on each island - limited by the amount of characters you can jump into. Leaving an island just gives an overview of \"free\" other islands you can travel to. And again you take your newly learned abilities with you - but not all of the characters'. The entities in the island simulation have a profession where you can decide what to do with it when you jump in. There is a value that indicates whether it's still reasonable to continue with that particular profession. If the entity - for some reason - can't continue with the current job, that value decreases and the entity will try to pick another free job. Before quitting the job, the entity will report this as an impediment in the corresponding townhall as a quest - asking for help.","title":"Game Design"},{"location":"openworld/GameDesign/#game-design","text":"This is about an mmorpg in a fantasy like world. The world is an active simulation where you \"jump\" into characters (ala Avatar). You inherit the characters abilities while you are jumped in. You learn some of the abilities in your own profile and can keep the abilities to some degree when you jump out of the character again. You will also leave some of the abilities at the entity when you jump out again. The world is divided by portals that connect islands. There is a max player amount on each island - limited by the amount of characters you can jump into. Leaving an island just gives an overview of \"free\" other islands you can travel to. And again you take your newly learned abilities with you - but not all of the characters'. The entities in the island simulation have a profession where you can decide what to do with it when you jump in. There is a value that indicates whether it's still reasonable to continue with that particular profession. If the entity - for some reason - can't continue with the current job, that value decreases and the entity will try to pick another free job. Before quitting the job, the entity will report this as an impediment in the corresponding townhall as a quest - asking for help.","title":"Game Design"},{"location":"openworld/Index/","text":"Server Setup Setup the server first. GameDesign GameDesign . Architecture TODO: document server architecture, world, map, ai-zone, chunk management, user handling Network TODO: document network stuff like cvar replication, protocol (flatbuffer) stuff, login, logout and so on General Hint : In order to start the server you will need to setup the postgres database. See the setup documentation for more details. After starting the server, you will get entities spawned in the world. You can use e.g. the ai remote debugger ( src/tools/rcon ) to inspect the state or use the client to connect. To specify the database that should be used use the config bars db_name , db_host , db_pw and db_user . For example: ./vengi-owserver -set db_host 192.168.0.1 -set db_post 5432 -db_name vengi -db_pw engine For the client connect you need a user in the database. You can create users with a server command called sv_createuser . To get a list of available commands, you can use cmdlist in the server terminal. Chunk download The chunks are persisted in the database and can be made available via cdn or any other http server. The gameserver has a built-in http server, too. If you want to use any other http server, you have to set it via sv_httpchunkurl like this: ./vengi-owserver -set sv_httpchunkurl http://myhostname:8080/mychunkurl ... or export the environment variable SV_HTTPCHUNKURL or add it to your config file (see setup documentation for more details). This cvar is one of those that is automatically replicated to the client. Whenever you change it, all clients will be notified about it and use the new url. The http endpoint reads several GET paramters: x , y , z : The chunk coordinates mapid You will find these values in the chunk database table. A custom chunk endpoint just would have to send the database blob with a content type of application/chunk . Docker The docker image is using apt-cacher-ng ( https://github.com/sameersbn/docker-apt-cacher-ng ) Make sure to have this running on your docker host docker run --name apt-cacher-ng --init -d --restart=always \\ --publish 3142:3142 \\ --volume /srv/docker/apt-cacher-ng:/var/cache/apt-cacher-ng \\ sameersbn/apt-cacher-ng:3.1-1","title":"OpenWorld"},{"location":"openworld/Index/#server","text":"","title":"Server"},{"location":"openworld/Index/#setup","text":"Setup the server first.","title":"Setup"},{"location":"openworld/Index/#gamedesign","text":"GameDesign .","title":"GameDesign"},{"location":"openworld/Index/#architecture","text":"TODO: document server architecture, world, map, ai-zone, chunk management, user handling","title":"Architecture"},{"location":"openworld/Index/#network","text":"TODO: document network stuff like cvar replication, protocol (flatbuffer) stuff, login, logout and so on","title":"Network"},{"location":"openworld/Index/#general","text":"Hint : In order to start the server you will need to setup the postgres database. See the setup documentation for more details. After starting the server, you will get entities spawned in the world. You can use e.g. the ai remote debugger ( src/tools/rcon ) to inspect the state or use the client to connect. To specify the database that should be used use the config bars db_name , db_host , db_pw and db_user . For example: ./vengi-owserver -set db_host 192.168.0.1 -set db_post 5432 -db_name vengi -db_pw engine For the client connect you need a user in the database. You can create users with a server command called sv_createuser . To get a list of available commands, you can use cmdlist in the server terminal.","title":"General"},{"location":"openworld/Index/#chunk-download","text":"The chunks are persisted in the database and can be made available via cdn or any other http server. The gameserver has a built-in http server, too. If you want to use any other http server, you have to set it via sv_httpchunkurl like this: ./vengi-owserver -set sv_httpchunkurl http://myhostname:8080/mychunkurl ... or export the environment variable SV_HTTPCHUNKURL or add it to your config file (see setup documentation for more details). This cvar is one of those that is automatically replicated to the client. Whenever you change it, all clients will be notified about it and use the new url. The http endpoint reads several GET paramters: x , y , z : The chunk coordinates mapid You will find these values in the chunk database table. A custom chunk endpoint just would have to send the database blob with a content type of application/chunk .","title":"Chunk download"},{"location":"openworld/Index/#docker","text":"The docker image is using apt-cacher-ng ( https://github.com/sameersbn/docker-apt-cacher-ng ) Make sure to have this running on your docker host docker run --name apt-cacher-ng --init -d --restart=always \\ --publish 3142:3142 \\ --volume /srv/docker/apt-cacher-ng:/var/cache/apt-cacher-ng \\ sameersbn/apt-cacher-ng:3.1-1","title":"Docker"},{"location":"openworld/Setup/","text":"Setup PostgreSQL first sudo as postgres default superuser 'postgres' on bash sudo -i -u postgres adding an new new user by typing createuser -s vengi create a new database createdb vengi now start postgres and add password for these user psql write this statement ALTER USER vengi WITH PASSWORD 'engine'; For the tests you need a different database called enginetest . You can also use other user/password combinations by setting some cvars: db_name db_host db_pw db_user See the configuration documentation for more details.","title":"Setup"},{"location":"openworld/Setup/#setup","text":"","title":"Setup"},{"location":"openworld/Setup/#postgresql","text":"first sudo as postgres default superuser 'postgres' on bash sudo -i -u postgres adding an new new user by typing createuser -s vengi create a new database createdb vengi now start postgres and add password for these user psql write this statement ALTER USER vengi WITH PASSWORD 'engine'; For the tests you need a different database called enginetest . You can also use other user/password combinations by setting some cvars: db_name db_host db_pw db_user See the configuration documentation for more details.","title":"PostgreSQL"},{"location":"thumbnailer/Examples/","text":"Example This allows you to create the thumbnails manually. Unix for i in $(find $HOME/dev/vengi -name \"*.vox\" -or -name \"*.cub\" -or -name \"*.qbt\" -or -name \"*.qb\" -or -name \"*.vxl\" -or -name \"*.vxm\"); do fullpath=$(readlink -f $i) md5=$(echo -n \"file://$fullpath\" | md5sum -z | awk ' { print $1.\".png\" }') vengi-thumbnailer -s 128 $i $HOME/.cache/thumbnails/large/$md5 done Windows $array = \"1-2,5\", \"1-2,7\" foreach ($i in $array){ ./vengi-thumbnailer -s 128 $i $i.png }","title":"Example"},{"location":"thumbnailer/Examples/#example","text":"This allows you to create the thumbnails manually.","title":"Example"},{"location":"thumbnailer/Examples/#unix","text":"for i in $(find $HOME/dev/vengi -name \"*.vox\" -or -name \"*.cub\" -or -name \"*.qbt\" -or -name \"*.qb\" -or -name \"*.vxl\" -or -name \"*.vxm\"); do fullpath=$(readlink -f $i) md5=$(echo -n \"file://$fullpath\" | md5sum -z | awk ' { print $1.\".png\" }') vengi-thumbnailer -s 128 $i $HOME/.cache/thumbnails/large/$md5 done","title":"Unix"},{"location":"thumbnailer/Examples/#windows","text":"$array = \"1-2,5\", \"1-2,7\" foreach ($i in $array){ ./vengi-thumbnailer -s 128 $i $i.png }","title":"Windows"},{"location":"thumbnailer/Index/","text":"About This application needs an opengl context. It is a command line tool running headless (meaning you don't see a window popping up). Linux Filemanagers Create thumbnailer images of all supported voxel formats. In combination with a mimetype definition and a .thumbnailer definition file that must be installed in /usr/share/mime/packages and /usr/share/thumbnailer this will e.g. create small preview images for the supported voxel formats . It works for any file manager that supports .thumbnailer entries, including Nautilus, Thunar (when tumbler is installed), Nemo, Caja, and PCManFM. Windows Explorer There is a pull request already (but it's not yet finished and would need the help of a windows developer). You can still run this application from the windows command line to generate thumbnail images of your voxel models. See the examples for more details.","title":"About"},{"location":"thumbnailer/Index/#about","text":"This application needs an opengl context. It is a command line tool running headless (meaning you don't see a window popping up).","title":"About"},{"location":"thumbnailer/Index/#linux-filemanagers","text":"Create thumbnailer images of all supported voxel formats. In combination with a mimetype definition and a .thumbnailer definition file that must be installed in /usr/share/mime/packages and /usr/share/thumbnailer this will e.g. create small preview images for the supported voxel formats . It works for any file manager that supports .thumbnailer entries, including Nautilus, Thunar (when tumbler is installed), Nemo, Caja, and PCManFM.","title":"Linux Filemanagers"},{"location":"thumbnailer/Index/#windows-explorer","text":"There is a pull request already (but it's not yet finished and would need the help of a windows developer). You can still run this application from the windows command line to generate thumbnail images of your voxel models. See the examples for more details.","title":"Windows Explorer"},{"location":"voxconvert/Configuration/","text":"Configuration The formats also have a list of mesh related cvars. See ./vengi-voxconvert --help or configuration for more details.","title":"Configuration"},{"location":"voxconvert/Configuration/#configuration","text":"The formats also have a list of mesh related cvars. See ./vengi-voxconvert --help or configuration for more details.","title":"Configuration"},{"location":"voxconvert/Examples/","text":"Examples Level of detail (LOD) Generate a lod scaled by 50% from the input model. ./vengi-voxconvert -s --input infile.vox --output output.vox Import 2d image as volume Imports a 2d image and applies depth to it. ./vengi-voxconvert --image-as-volume --image-as-volume-max-depth 8 --image-as-volume-both-sides true --input infile.png --output output.vox Import given input image as volume. Uses a depth map to make a volume out of the image. The depth map R channel is using values from 0 (black) to white (255) resulting in voxel heights from 1 to max-height (see --image-as-volume-max-depth ). The --input with e.g. infile.png will pick the depth map next to the image path called infile-dm.png as depth map. Merge several models Merge several models into one: ./vengi-voxconvert --input one.vox --input two.vox --output onetwo.vox Split objects into single volumes Split voxels with the palette index 66 into own nodes. ./vengi-voxconvert --script splitcolor --scriptcolor 66 --input infile.vox --output outfile.vox Splitting single objects that are not connected to other objects can also be split into own nodes. ./vengi-voxconvert --script splitobject --input infile.vox --output outfile.vox Voxelize an obj, gltf, ply or stl file Voxelize an obj and save as magicavoxel (including colors): You are getting better results if you create a palette from your textures first. This can be done by reducing the color to 256 and import that reduced image in voxedit as palette. For obj the mtl file must be in the same dir as the obj files, as well as the potential textures. glTF is supported both in ascii and binary - but the satelite files must also reside in the same dir as the glb or gltf file. ./vengi-voxconvert -set voxformat_scale 2 -set palette /path/to/palette.png --input mesh.obj --output voxels.vox See the supported formats for a few more details. Generate from heightmap Just specify the heightmap as input file like this: ./vengi-voxconvert --input heightmap.png --output outfile.vox It's assumed that the given image is a gray scale image - but only the red channel is used anyway. If you want to colorize the surface of your heightmap import, you can specify --colored-heightmap - this will use the alpha channel of the image as height and the rgb channels of the image to determine the surface color. Translate the voxels You can translate the voxels in the world like this: ./vengi-voxconvert --translate 0:10:0 --input heightmap.png --output outfile.vox This would move the voxels 10 units upwards. But keep in mind that not every format supports to store a translation offset. Execute lua script Use the --script parameter: ./vengi-voxconvert --script \"cover 2\" --input infile.vox --output outfile.vox This is executing the script in ./scripts/cover.lua with a parameter of 2 . ./vengi-voxconvert --script \"./scripts/cover.lua 2\" --input infile.vox --output outfile.vox This is doing exactly the same as above - just with a full path. See the scripting documentation for further details. Extract palette png Saves the png in the same dir as the vox file: ./vengi-voxconvert --export-palette --input infile.vox --output outfile.vox There will be an infile.png now. Extract single layers Extract just a few layers from the input file. ./vengi-voxconvert --filter 1-2,4 --input infile.vox --output outfile.vox This will export layers 1, 2 and 4. Convert to mesh You can export your volume model into a gltf, obj, stl or ply (see Formats for more options) ./vengi-voxconvert --input infile.vox --output outfile.obj ./vengi-voxconvert --input infile.vox --output outfile.gltf -set voxformat_transform_mesh true -set voxformat_scale 2.0 Batch convert To convert a complete directory of e.g. *.vox to *.obj files, you can use e.g. the bash like this: Bash (Linux, OSX) Beware - no whitespaces in files for i in *.vox; do vengi-voxconvert --input \"$i\" --output \"${i%.vox}.obj\"; done for i in *.vxm; do vengi-voxconvert --input \"$i\" --output \"${i%.vxm}.gltf\" done PowerShell (Windows) https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/06-flow-control?view=powershell-7.2 An example for the windows powershell to extract single layers into a new model $array = \"1-2,5\", \"1-2,7\" foreach ($i in $array){ ./vengi-voxconvert --filter $i --input \"input.vox\" --output \"output_$i.vxm\" } Batch file (Windows) https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/for Windows batch (or cmd.exe ) example to convert all png in the current directory into magicavoxel vox files. for %f in (*.png) do call vengi-voxconvert --input \"%~f\" --output \"%~nf.vox\"","title":"Examples"},{"location":"voxconvert/Examples/#examples","text":"","title":"Examples"},{"location":"voxconvert/Examples/#level-of-detail-lod","text":"Generate a lod scaled by 50% from the input model. ./vengi-voxconvert -s --input infile.vox --output output.vox","title":"Level of detail (LOD)"},{"location":"voxconvert/Examples/#import-2d-image-as-volume","text":"Imports a 2d image and applies depth to it. ./vengi-voxconvert --image-as-volume --image-as-volume-max-depth 8 --image-as-volume-both-sides true --input infile.png --output output.vox Import given input image as volume. Uses a depth map to make a volume out of the image. The depth map R channel is using values from 0 (black) to white (255) resulting in voxel heights from 1 to max-height (see --image-as-volume-max-depth ). The --input with e.g. infile.png will pick the depth map next to the image path called infile-dm.png as depth map.","title":"Import 2d image as volume"},{"location":"voxconvert/Examples/#merge-several-models","text":"Merge several models into one: ./vengi-voxconvert --input one.vox --input two.vox --output onetwo.vox","title":"Merge several models"},{"location":"voxconvert/Examples/#split-objects-into-single-volumes","text":"Split voxels with the palette index 66 into own nodes. ./vengi-voxconvert --script splitcolor --scriptcolor 66 --input infile.vox --output outfile.vox Splitting single objects that are not connected to other objects can also be split into own nodes. ./vengi-voxconvert --script splitobject --input infile.vox --output outfile.vox","title":"Split objects into single volumes"},{"location":"voxconvert/Examples/#voxelize-an-obj-gltf-ply-or-stl-file","text":"Voxelize an obj and save as magicavoxel (including colors): You are getting better results if you create a palette from your textures first. This can be done by reducing the color to 256 and import that reduced image in voxedit as palette. For obj the mtl file must be in the same dir as the obj files, as well as the potential textures. glTF is supported both in ascii and binary - but the satelite files must also reside in the same dir as the glb or gltf file. ./vengi-voxconvert -set voxformat_scale 2 -set palette /path/to/palette.png --input mesh.obj --output voxels.vox See the supported formats for a few more details.","title":"Voxelize an obj, gltf, ply or stl file"},{"location":"voxconvert/Examples/#generate-from-heightmap","text":"Just specify the heightmap as input file like this: ./vengi-voxconvert --input heightmap.png --output outfile.vox It's assumed that the given image is a gray scale image - but only the red channel is used anyway. If you want to colorize the surface of your heightmap import, you can specify --colored-heightmap - this will use the alpha channel of the image as height and the rgb channels of the image to determine the surface color.","title":"Generate from heightmap"},{"location":"voxconvert/Examples/#translate-the-voxels","text":"You can translate the voxels in the world like this: ./vengi-voxconvert --translate 0:10:0 --input heightmap.png --output outfile.vox This would move the voxels 10 units upwards. But keep in mind that not every format supports to store a translation offset.","title":"Translate the voxels"},{"location":"voxconvert/Examples/#execute-lua-script","text":"Use the --script parameter: ./vengi-voxconvert --script \"cover 2\" --input infile.vox --output outfile.vox This is executing the script in ./scripts/cover.lua with a parameter of 2 . ./vengi-voxconvert --script \"./scripts/cover.lua 2\" --input infile.vox --output outfile.vox This is doing exactly the same as above - just with a full path. See the scripting documentation for further details.","title":"Execute lua script"},{"location":"voxconvert/Examples/#extract-palette-png","text":"Saves the png in the same dir as the vox file: ./vengi-voxconvert --export-palette --input infile.vox --output outfile.vox There will be an infile.png now.","title":"Extract palette png"},{"location":"voxconvert/Examples/#extract-single-layers","text":"Extract just a few layers from the input file. ./vengi-voxconvert --filter 1-2,4 --input infile.vox --output outfile.vox This will export layers 1, 2 and 4.","title":"Extract single layers"},{"location":"voxconvert/Examples/#convert-to-mesh","text":"You can export your volume model into a gltf, obj, stl or ply (see Formats for more options) ./vengi-voxconvert --input infile.vox --output outfile.obj ./vengi-voxconvert --input infile.vox --output outfile.gltf -set voxformat_transform_mesh true -set voxformat_scale 2.0","title":"Convert to mesh"},{"location":"voxconvert/Examples/#batch-convert","text":"To convert a complete directory of e.g. *.vox to *.obj files, you can use e.g. the bash like this:","title":"Batch convert"},{"location":"voxconvert/Index/","text":"About Command line tool to convert voxel volume, image or polygon formats between each other. Modifying the voxels is also supported - rotating, transfering, create lod, extract palette, execute lua scripts and a lot more. If you need a way to automate your voxel assets for your art pipeline, voxconvert might be a tool you find useful. If you e.g. need to apply a snow layer on top of your voxels, put grass everywhere or just thicken your voxels - check our the lua script integration and the default scripts that are shipped with the tool. If you have images that you would like to convert to voxels including depth, you can import the image as a plane and apply the depth values for each voxel. Just check out the examples and the usage links below. If you dislike the tool, found a bug or need a feature, please let us know. Further reading Usage Configuration Examples Screenshots Supported formats Scripting support Palettes","title":"About"},{"location":"voxconvert/Index/#about","text":"Command line tool to convert voxel volume, image or polygon formats between each other. Modifying the voxels is also supported - rotating, transfering, create lod, extract palette, execute lua scripts and a lot more. If you need a way to automate your voxel assets for your art pipeline, voxconvert might be a tool you find useful. If you e.g. need to apply a snow layer on top of your voxels, put grass everywhere or just thicken your voxels - check our the lua script integration and the default scripts that are shipped with the tool. If you have images that you would like to convert to voxels including depth, you can import the image as a plane and apply the depth values for each voxel. Just check out the examples and the usage links below. If you dislike the tool, found a bug or need a feature, please let us know.","title":"About"},{"location":"voxconvert/Index/#further-reading","text":"Usage Configuration Examples Screenshots Supported formats Scripting support Palettes","title":"Further reading"},{"location":"voxconvert/Screenshots/","text":"Screenshots","title":"Screenshots"},{"location":"voxconvert/Screenshots/#screenshots","text":"","title":"Screenshots"},{"location":"voxconvert/Usage/","text":"Usage ./vengi-voxconvert --merge --scale --input infile --output outfile --crop : reduces the volume sizes to their voxel boundaries. --export-layers : export all the layers of a scene into single files. It is suggested to name the layers properly to get reasonable file names. --export-palette : will save the included palette as png next to the source file. --filter <filter> : will filter out layers not mentioned in the expression. E.g. 1-2,4 will handle layer 1, 2 and 4. It is the same as 1,2,4 . The first layer is 0 . See the layers note below. --force : overwrite existing files --image-as-heightmap : import input images as heightmap (default) --colored-heightmap : Use the alpha channel of the heightmap as height and the rgb data as surface color. --image-as-volume : import given input image as volume. Uses a depth map to make a volume out of the image. --image-as-volume-max-depth : importing image as volume max depth --image-as-volume-both-sides : importing image as volume and use the depth map for both sides --image-as-plane : import input images as planes --input <file> : allows to specify input files. You can specify more than one file --merge : will merge a multi layer volume (like vox , qb or qbt ) into a single volume of the target file --mirror <x|y|z> : allows you to mirror the volumes at x, y and z axis --output <file> : allows you to specify the output filename --resize <x:y:z> : resize the volume by the given x (right), y (up) and z (back) values --rotate <x|y|z> : allows you to rotate the volumes by 90 degree at x, y and z axis --scale : perform lod conversion of the input volume (50% scale per call) --script \"<script> <args>\" : execute the given script - see scripting support for more details --split <x:y:z> : slices the volumes into pieces of the given size --translate <x:y:z> : translates the volumes by x (right), y (up), z (back) Just type vengi-voxconvert to get a full list of commands and options. Using a different target palette is also possible by setting the palette cvar . ./vengi-voxconvert -set palette /path/to/palette.png --input infile outfile The palette file has to be in the dimensions 1x256. It is also possible to just provide the basename of the palette. This is e.g. nippon . The tool will then try to look up the file palette-nippon.png in the file search paths. You can convert to a different palette with this command. The closest possible color will be chosen for each color from the source file palette to the specified palette. The order of execution is: filter export layers merge scale mirror rotate translate script pivot crop split Layers Some formats also have layer support. Our layers are maybe not the layers you know from your favorite editor. Each layer can currently only have one object or volume in it. To get the proper layer ids (starting from 0) for your voxel file, you should load it once in voxedit and check the layer panel. Especially magicavoxel supports more objects in one layer. This might be confusing to get the right numbers for voxconvert . See this issue for a few more details.","title":"Usage"},{"location":"voxconvert/Usage/#usage","text":"./vengi-voxconvert --merge --scale --input infile --output outfile --crop : reduces the volume sizes to their voxel boundaries. --export-layers : export all the layers of a scene into single files. It is suggested to name the layers properly to get reasonable file names. --export-palette : will save the included palette as png next to the source file. --filter <filter> : will filter out layers not mentioned in the expression. E.g. 1-2,4 will handle layer 1, 2 and 4. It is the same as 1,2,4 . The first layer is 0 . See the layers note below. --force : overwrite existing files --image-as-heightmap : import input images as heightmap (default) --colored-heightmap : Use the alpha channel of the heightmap as height and the rgb data as surface color. --image-as-volume : import given input image as volume. Uses a depth map to make a volume out of the image. --image-as-volume-max-depth : importing image as volume max depth --image-as-volume-both-sides : importing image as volume and use the depth map for both sides --image-as-plane : import input images as planes --input <file> : allows to specify input files. You can specify more than one file --merge : will merge a multi layer volume (like vox , qb or qbt ) into a single volume of the target file --mirror <x|y|z> : allows you to mirror the volumes at x, y and z axis --output <file> : allows you to specify the output filename --resize <x:y:z> : resize the volume by the given x (right), y (up) and z (back) values --rotate <x|y|z> : allows you to rotate the volumes by 90 degree at x, y and z axis --scale : perform lod conversion of the input volume (50% scale per call) --script \"<script> <args>\" : execute the given script - see scripting support for more details --split <x:y:z> : slices the volumes into pieces of the given size --translate <x:y:z> : translates the volumes by x (right), y (up), z (back) Just type vengi-voxconvert to get a full list of commands and options. Using a different target palette is also possible by setting the palette cvar . ./vengi-voxconvert -set palette /path/to/palette.png --input infile outfile The palette file has to be in the dimensions 1x256. It is also possible to just provide the basename of the palette. This is e.g. nippon . The tool will then try to look up the file palette-nippon.png in the file search paths. You can convert to a different palette with this command. The closest possible color will be chosen for each color from the source file palette to the specified palette.","title":"Usage"},{"location":"voxconvert/Usage/#the-order-of-execution-is","text":"filter export layers merge scale mirror rotate translate script pivot crop split","title":"The order of execution is:"},{"location":"voxconvert/Usage/#layers","text":"Some formats also have layer support. Our layers are maybe not the layers you know from your favorite editor. Each layer can currently only have one object or volume in it. To get the proper layer ids (starting from 0) for your voxel file, you should load it once in voxedit and check the layer panel. Especially magicavoxel supports more objects in one layer. This might be confusing to get the right numbers for voxconvert . See this issue for a few more details.","title":"Layers"},{"location":"voxedit/Configuration/","text":"Configuration See ./vengi-voxedit --help or configuration for more details. Configuration variables: ve_ambientcolor : ve_animspeed : ve_autosaveseconds : ve_camzoomspeed : ve_diffusecolor : ve_grayinactive : ve_gridsize : ve_lastfile : ve_lastfiles : ve_lastpalette : ve_modelspace : ve_rendershadow : ve_showaabb : ve_showaxis : ve_showgrid : ve_showlockedaxis :","title":"Configuration"},{"location":"voxedit/Configuration/#configuration","text":"See ./vengi-voxedit --help or configuration for more details. Configuration variables: ve_ambientcolor : ve_animspeed : ve_autosaveseconds : ve_camzoomspeed : ve_diffusecolor : ve_grayinactive : ve_gridsize : ve_lastfile : ve_lastfiles : ve_lastpalette : ve_modelspace : ve_rendershadow : ve_showaabb : ve_showaxis : ve_showgrid : ve_showlockedaxis :","title":"Configuration"},{"location":"voxedit/Controls/","text":"Controls Placing voxels via left mouse button or SHIFT+[CTRL+]Cursors Deleting voxels via right mouse button Rotating viewport via middle mouse button and moving the mouse Shift the camera by holding alt and moving the mouse Holding the left or right mouse buttons spans an AABB to perform the action in Using the keybinding for +actionexecute (v) command allows you to also span an AABB with the cursor keys (resp. the keys that are bound to the +movecursor[direction] commands). Enter places the reference position at the current cursor position SHIFT+Tab opens the console (type cmdlist and cvarlist ) See the binding editor in the menu bar to get a complete list.","title":"Controls"},{"location":"voxedit/Controls/#controls","text":"Placing voxels via left mouse button or SHIFT+[CTRL+]Cursors Deleting voxels via right mouse button Rotating viewport via middle mouse button and moving the mouse Shift the camera by holding alt and moving the mouse Holding the left or right mouse buttons spans an AABB to perform the action in Using the keybinding for +actionexecute (v) command allows you to also span an AABB with the cursor keys (resp. the keys that are bound to the +movecursor[direction] commands). Enter places the reference position at the current cursor position SHIFT+Tab opens the console (type cmdlist and cvarlist ) See the binding editor in the menu bar to get a complete list.","title":"Controls"},{"location":"voxedit/Features/","text":"Features A few of the features are: LUA scripting api and built-in editor Layer and scene graph support Auto cropping volumes Auto generate content like trees or noise volumes Import images as heightmaps, palettes or planes Customizable UI L-System integration Undo/Redo Custom color palettes Viewport screenshots Layer animation support Key-Frame animation support (WIP) Custom key bindings Show commands of actions (to configure your own key bindings) Copy/Cut/Paste - paste to cursor or reference position Exporting single layers or whole scenes into meshes and a lot of other formats Generate level of details (LOD) volumes Import meshes and voxelize them There are a lot more features to explore. If you feel like something is missing here but is supported, please let me know.","title":"Features"},{"location":"voxedit/Features/#features","text":"A few of the features are: LUA scripting api and built-in editor Layer and scene graph support Auto cropping volumes Auto generate content like trees or noise volumes Import images as heightmaps, palettes or planes Customizable UI L-System integration Undo/Redo Custom color palettes Viewport screenshots Layer animation support Key-Frame animation support (WIP) Custom key bindings Show commands of actions (to configure your own key bindings) Copy/Cut/Paste - paste to cursor or reference position Exporting single layers or whole scenes into meshes and a lot of other formats Generate level of details (LOD) volumes Import meshes and voxelize them There are a lot more features to explore. If you feel like something is missing here but is supported, please let me know.","title":"Features"},{"location":"voxedit/Index/","text":"About This is an opensource, cross platform voxel volume editor with scripting support. You can load and save a lot of different voxel formats . Its built around 256 color palettes . Animation support is in progress. The voxel editor is not yet ready for production work - if you are a developer or voxel artist , please consider contributing. Requirements OpenGL 3.2 Further reading Features Configuration Controls Screenshots Supported voxel formats Scripting support Palettes","title":"About"},{"location":"voxedit/Index/#about","text":"This is an opensource, cross platform voxel volume editor with scripting support. You can load and save a lot of different voxel formats . Its built around 256 color palettes . Animation support is in progress. The voxel editor is not yet ready for production work - if you are a developer or voxel artist , please consider contributing.","title":"About"},{"location":"voxedit/Index/#requirements","text":"OpenGL 3.2","title":"Requirements"},{"location":"voxedit/Index/#further-reading","text":"Features Configuration Controls Screenshots Supported voxel formats Scripting support Palettes","title":"Further reading"},{"location":"voxedit/Screenshots/","text":"Screenshots","title":"Screenshots"},{"location":"voxedit/Screenshots/#screenshots","text":"","title":"Screenshots"}]}